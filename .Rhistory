# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(as.character(valor)),
mes = month(data, label=TRUE),
ano = factor(ano)
) %>%
filter(data >= as.Date("2015-01-01") & data < as.Date("2017-01-01")) %>%
select(data, ano, mes, tipo, descrição, valor, cartao)
View(dadosT)
dadosT
dadosT[!complete.cases(dadosT),]
as.character("4,100.00")
as.numeric(as.character("4,100.00"))
?as.numeric()
?as.numeric
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(as.character(gsub(",","", valor))),
mes = month(data, label=TRUE),
ano = factor(ano)
) %>%
filter(data >= as.Date("2015-01-01") & data < as.Date("2017-01-01")) %>%
select(data, ano, mes, tipo, descrição, valor, cartao)
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(as.character(gsub(",","", valor))),
mes = month(data, label=TRUE),
ano = factor(ano)
) %>%
filter(data >= as.Date("2015-01-01") & data < as.Date("2017-01-01")) %>%
select(data, ano, mes, tipo, descrição, valor, cartao)
# Vamos agrupar os dados por tipo de gasto, ano e mes, e depois calcular o total de gastos em cada categoria
dadosM <- tbl_df(dadosT)
dadosM <- group_by(dadosM, tipo, ano, mes)
saveRDS(dadosM, "dadosM.rds")
totais <- summarise(dadosM, total=sum(valor))
saveRDS(totais, "totais.rds")
# o gráfico
# as cores:
# Neste caso, temos 20 cat, mas somente 9 cores na paleta brewer padrao
colourCount = length(unique(totais$tipo))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
plt <- ggplot(totais, aes(x=mes, y=total, group=tipo, colour=tipo))
(plt +  geom_line() + geom_point() +
scale_colour_manual(values = getPalette(colourCount))+
facet_grid(ano ~., scale = free) +
labs(title="Gastos por categoria", y="Total (R$)") +
theme(plot.title = element_text(hjust = 0.5))
)
# o gráfico
# as cores:
# Neste caso, temos 20 cat, mas somente 9 cores na paleta brewer padrao
colourCount = length(unique(totais$tipo))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
plt <- ggplot(totais, aes(x=mes, y=total, group=tipo, colour=tipo))
(plt +  geom_line() + geom_point() +
scale_colour_manual(values = getPalette(colourCount))+
facet_grid(ano ~., scale = "free") +
labs(title="Gastos por categoria", y="Total (R$)") +
theme(plot.title = element_text(hjust = 0.5))
)
dev.copy(png, file="plot1.png")
dev.off()
sub <- with(dadosM, ano==2015 & mes=="Mar" & tipo=="pagamentos" & valor > 4000)
dadosM[which(sub),]
# vamos ver do q se trata, para talvez remover do gráfico
sub <- with(dadosM, ano==2015 & mes=="Mar" & tipo=="pagamentos" & valor > 4000)
kable(dadosM[which(sub),])
# consta um lançamento referente a pagamento de cc, mas não é assim que eu uso o programa
# podemos tirar do gráfico limitando
# vou filtrar os dados novamente para retirar todas as lihas onde
# descrição contenha "visa"
# vamos ver do q se trata, para talvez remover do gráfico
sub <- with(dadosM, ano==2015 & mes=="Mar" & tipo=="pagamentos" )
kable(dadosM[which(sub),])
sub <- with(dadosM, ano==2015 & mes=="Mar" & tipo=="pagamentos" & valor > 4000)
dadosFil <- dadosM[which(!sub),]
dadosFil <- group_by(dadosFil, tipo, ano, mes)
totais <- summarise(dadosFil, total=sum(valor))
plt <- ggplot(totais, aes(x=mes, y=total, group=tipo, colour=tipo))
(plt +  geom_line() + geom_point() +
scale_colour_manual(values = getPalette(colourCount))+
facet_grid(ano ~., scale="free") +
labs(title="Gastos por categoria", y="Total (R$)") +
theme(plot.title = element_text(hjust = 0.5))
)
dev.copy(png, file="plot2.png")
dev.off()
#  vamos salvar os dados
saveRDS(dadosFil, "dados-filtrados.rds")
saveRDS(totais, "totais.rds")
#devidos subsets
totais.alim <- totais[totais$tipo=="alimentação",]
plt.alim <- ggplot(totais.alim, aes(x=mes, y=total, group=ano, colour=ano))
(plt.alim +  geom_line() +
geom_point(size=0.5, alpha=0.5) +
geom_hline(aes(yintercept = media, colour = ano), linetype=2) +
labs(title="Gastos com alimentação", y="Total (R$)") +
theme(plot.title = element_text(hjust = 0.5))
)
#  vamos salvar os dados
saveRDS(dadosFil, "dados-filtrados.rds")
saveRDS(totais, "totais.rds")
#devidos subsets
totais.alim <- totais[totais$tipo=="alimentação",]
plt.alim <- ggplot(totais.alim, aes(x=mes, y=total, group=ano, colour=ano))
(plt.alim +  geom_line() +
geom_point(size=0.5, alpha=0.5) +
geom_hline(aes(yintercept = FUN(mean), colour = ano), linetype=2) +
labs(title="Gastos com alimentação", y="Total (R$)") +
theme(plot.title = element_text(hjust = 0.5))
)
#  vamos salvar os dados
saveRDS(dadosFil, "dados-filtrados.rds")
saveRDS(totais, "totais.rds")
#devidos subsets
totais.alim <- totais[totais$tipo=="alimentação",]
plt.alim <- ggplot(totais.alim, aes(x=mes, y=total, group=ano, colour=ano))
(plt.alim +  geom_line() +
geom_point(size=0.5, alpha=0.5) +
# geom_hline(aes(yintercept = FUN(mean), colour = ano), linetype=2) +
labs(title="Gastos com alimentação", y="Total (R$)") +
theme(plot.title = element_text(hjust = 0.5))
)
dev.copy(png, file="plot-alim.png")
dev.off()
#  vamos salvar os dados
saveRDS(dadosFil, "dados-filtrados.rds")
saveRDS(totais, "totais.rds")
#devidos subsets
totais.alim <- totais[totais$tipo=="alimentação",]
plt.alim <- ggplot(totais.alim, aes(x=mes, y=total, group=ano, colour=ano))
(plt.alim +  geom_line() +
geom_point(size=0.5, alpha=0.5) +
# geom_hline(aes(yintercept = FUN(mean), colour = ano), linetype=2) +
stat_summary(fun.y=mean,geom="line",lwd=2,aes(group=ano)) +
labs(title="Gastos com alimentação", y="Total (R$)") +
theme(plot.title = element_text(hjust = 0.5))
)
dev.copy(png, file="plot-alim.png")
dev.off()
#  vamos salvar os dados
saveRDS(dadosFil, "dados-filtrados.rds")
saveRDS(totais, "totais.rds")
#devidos subsets
totais.alim <- totais[totais$tipo=="alimentação",]
plt.alim <- ggplot(totais.alim, aes(x=mes, y=total, group=ano, colour=ano))
(plt.alim +  geom_line() +
geom_point(size=0.5, alpha=0.5) +
# geom_hline(aes(yintercept = FUN(mean), colour = ano), linetype=2) +
stat_summary(fun.y=mean,geom="line",lwd=0.5,aes(group=ano)) +
labs(title="Gastos com alimentação", y="Total (R$)") +
theme(plot.title = element_text(hjust = 0.5))
)
dev.copy(png, file="plot-alim.png")
dev.off()
#  vamos salvar os dados
saveRDS(dadosFil, "dados-filtrados.rds")
saveRDS(totais, "totais.rds")
#devidos subsets
totais.alim <- totais[totais$tipo=="alimentação",]
plt.alim <- ggplot(totais.alim, aes(x=mes, y=total, group=ano, colour=ano))
(plt.alim +  geom_line() +
geom_point(size=0.5, alpha=0.5) +
# geom_hline(aes(yintercept = FUN(mean), colour = ano), linetype=2) +
# stat_summary(fun.y=mean,geom="line",lwd=0.5,aes(group=ano)) +
geom_hline(yintercept = mean(total), color="blue"))
#  vamos salvar os dados
saveRDS(dadosFil, "dados-filtrados.rds")
saveRDS(totais, "totais.rds")
#devidos subsets
totais.alim <- totais[totais$tipo=="alimentação",]
plt.alim <- ggplot(totais.alim, aes(x=mes, y=total, group=ano, colour=ano))
(plt.alim +  geom_line() +
geom_point(size=0.5, alpha=0.5) +
# geom_hline(aes(yintercept = FUN(mean), colour = ano), linetype=2) +
# stat_summary(fun.y=mean,geom="line",lwd=0.5,aes(group=ano)) +
geom_hline(yintercept = mean(totais$total), color="blue"))
labs(title="Gastos com alimentação", y="Total (R$)") +
theme(plot.title = element_text(hjust = 0.5))
)
#  vamos salvar os dados
saveRDS(dadosFil, "dados-filtrados.rds")
saveRDS(totais, "totais.rds")
#devidos subsets
totais.alim <- totais[totais$tipo=="alimentação",]
plt.alim <- ggplot(totais.alim, aes(x=mes, y=total, group=ano, colour=ano))
(plt.alim +  geom_line() +
geom_point(size=0.5, alpha=0.5) +
# geom_hline(aes(yintercept = FUN(mean), colour = ano), linetype=2) +
# stat_summary(fun.y=mean,geom="line",lwd=0.5,aes(group=ano)) +
geom_hline(aes(yintercept = mean(total), color=ano)) +
labs(title="Gastos com alimentação", y="Total (R$)") +
theme(plot.title = element_text(hjust = 0.5))
)
dev.copy(png, file="plot-alim.png")
dev.off()
#  vamos salvar os dados
saveRDS(dadosFil, "dados-filtrados.rds")
saveRDS(totais, "totais.rds")
#devidos subsets
totais.alim <- totais[totais$tipo=="alimentação",]
plt.alim <- ggplot(totais.alim, aes(x=mes, y=total, group=ano, colour=ano))
(plt.alim +  geom_line() +
geom_point(size=0.5, alpha=0.5) +
# geom_hline(aes(yintercept = FUN(mean), colour = ano), linetype=2) +
# stat_summary(fun.y=mean,geom="line",lwd=0.5,aes(group=ano)) +
geom_hline(aes(yintercept = mean(total), colour=ano), linetype=2) +
labs(title="Gastos com alimentação", y="Total (R$)") +
theme(plot.title = element_text(hjust = 0.5))
)
dev.copy(png, file="plot-alim.png")
dev.off()
?aggregate()
aggregate(totais, by=ano, mean)
totais
aggregate(totais, by=totais$ano, mean)
aggregate(totais, by=list(totais$ano), mean)
aggregate(totais, by=list(totais$ano), FUN = "mean")
aggregate(totais, by=list(tipo, ano), FUN = "mean")
aggregate(totais, by=list(totais$tipo, totais$ano), FUN = "mean")
#  vamos salvar os dados
saveRDS(dadosFil, "dados-filtrados.rds")
totais <- data.table(totais)
totais[, media := mean(total), by = list(tipo,ano)]
saveRDS(totais, "totais.rds")
totais
#  vamos salvar os dados
saveRDS(dadosFil, "dados-filtrados.rds")
totais <- data.table(totais)
totais[, media := mean(total), by = list(tipo,ano)]
saveRDS(totais, "totais.rds")
#devidos subsets
totais.alim <- totais[totais$tipo=="alimentação",]
plt.alim <- ggplot(totais.alim, aes(x=mes, y=total, group=ano, colour=ano))
(plt.alim +  geom_line() +
geom_point(size=0.5, alpha=0.5) +
geom_hline(aes(yintercept = media, colour = ano), linetype=2) +
labs(title="Gastos com pagamentos", y="Total (R$)") +
theme(plot.title = element_text(hjust = 0.5))
)
dev.copy(png, file="plot-alim.png")
dev.off()
library(data.table)
library(dplyr)
library(lubridate)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
library(knitr)
#versão csv
arquivo <- "data/mobills-2015a2017-03.csv"
dados <- read.csv(arquivo)
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(as.character(gsub(",","", valor))),
mês = month(data, label=TRUE),
ano = factor(ano)
) %>%
filter(data >= as.Date("2015-01-01") & data < as.Date("2017-01-01")) %>%
select(data, ano, mes, tipo, descrição, valor, cartao)
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(as.character(gsub(",","", valor))),
mês = month(data, label=TRUE),
ano = factor(ano)
) %>%
filter(data >= as.Date("2015-01-01") & data < as.Date("2017-01-01")) %>%
select(data, ano, mês, tipo, descrição, valor, cartao)
# Vamos agrupar os dados por tipo de gasto, ano e mes, e depois calcular o total de gastos em cada categoria
dadosM <- tbl_df(dadosT)
dadosM <- group_by(dadosM, tipo, ano, mes)
library(data.table)
library(dplyr)
library(lubridate)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
library(knitr)
#versão csv
arquivo <- "data/mobills-2015a2017-03.csv"
dados <- read.csv(arquivo)
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(as.character(gsub(",","", valor))),
mes = month(data, label=TRUE),
ano = factor(ano)
) %>%
filter(data >= as.Date("2015-01-01") & data < as.Date("2017-01-01")) %>%
select(data, ano, mes, tipo, descrição, valor, cartao)
# Vamos agrupar os dados por tipo de gasto, ano e mes, e depois calcular o total de gastos em cada categoria
dadosM <- tbl_df(dadosT)
dadosM <- group_by(dadosM, tipo, ano, mes)
saveRDS(dadosM, "dadosM.rds")
totais <- summarise(dadosM, total=sum(valor))
saveRDS(totais, "totais.rds")
sub <- with(dadosM, ano==2015 & mes=="Mar" & tipo=="pagamentos" & valor > 4000)
dadosFil <- dadosM[which(!sub),]
dadosFil <- group_by(dadosFil, tipo, ano, mes)
totais <- summarise(dadosFil, total=sum(valor))
#  vamos salvar os dados
saveRDS(dadosFil, "dados-filtrados.rds")
totais <- data.table(totais)
totais[, media := mean(total), by = list(tipo,ano)]
saveRDS(totais, "totais.rds")
#devidos subsets
totais.alim <- totais[totais$tipo=="alimentação",]
plt.alim <- ggplot(totais.alim, aes(x=mes, y=total, group=ano, colour=ano))
(plt.alim +  geom_line() +
geom_point(size=0.5, alpha=0.5) +
geom_hline(aes(yintercept = media, colour = ano), linetype=2) +
labs(title="Gastos com pagamentos", y="Total (R$)", x="Mês") +
theme(plot.title = element_text(hjust = 0.5))
)
dev.copy(png, file="plot-alim.png")
dev.off()
render("analise.Rmd", output_format = "md_document")
?render
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
View(dadosM)
dadosM$data
dadosM$data[1]
day(dadosM$data[1])
sub <- with(dadosM, mes %in% c("Mar","May") & day(dadosM$data) == 25)
dadosM[which(sub),]
dadosM[unique(dadosM[which(sub),]$tipo),]
dadosM[which(sub),]
dadosub <- dadosM[which(sub),]
dadosub[unique(dadosub$tipo),]
unique(dadosM[which(sub),]$tipo)
unique([dadosM[which(sub),]$tipo,]
dadosM[unique(dadosM[which(sub),]$tipo,]
# vamos ver do q se trata, para talvez remover do gráfico
sub <- with(dadosM, mes %in% c("Mar","May") & day(dadosM$data) == 25)
dadosub <- dadosM[which(sub),]
kable(dadosub[unique(dadosub$tipo),])
# vamos ver do q se trata, para talvez remover do gráfico
sub <- with(dadosM, mes %in% c("Mar","May") & day(dadosM$data) == 25)
dadosub <- dadosM[which(sub),]
kable(head(dadosub[unique(dadosub$tipo),]))
# vamos ver do q se trata, para talvez remover do gráfico
sub <- with(dadosM, mes %in% c("Jun","Jul") & day(dadosM$data) == 25)
dadosub <- dadosM[which(sub),]
kable(head(dadosub[unique(dadosub$tipo),]))
kable(tail(dadosub[unique(dadosub$tipo),]))
# vamos ver do q se trata, para talvez remover do gráfico
dados.alim <- dadosFil %>% filter(mes %in% c("May","Jul") & tipo=="alimentação") %>%
arrange(ano, mes, desc(valor))
kable(dados.alim)
# vamos ver do q se trata, para talvez remover do gráfico
dados.alim <- dadosFil %>% filter(mes %in% c("May","Jul") & tipo=="alimentação" & valor > 50) %>%
arrange(ano, mes, desc(valor))
kable(dados.alim)
totais.pag <- totais[totais$tipo=="pagamentos",]
plt.pag <- ggplot(totais.pag, aes(x=mes, y=total, group=ano, colour=ano))
(plt.pag +  geom_line() +
geom_point(size=0.5, alpha=0.5) +
# facet_grid(ano ~., scale="free") +
# geom_smooth(colour="black", linetype=3, alpha=0.2) +
# geom_errorbar(aes(ymin=total-erro, ymax=total+erro), width=.1) +
geom_hline(aes(yintercept = media, colour = ano), linetype=2) +
labs(title="Gastos com pagamentos", y="Total (R$)") +
theme(plot.title = element_text(hjust = 0.5))
)
# vamos ver do q se trata, para talvez remover do gráfico
dados.pag <- dadosFil %>% filter(ano %in% c(2015) & tipo=="pagamentos") %>%
arrange(ano, mes, desc(valor))
kable(dados.alim)
# vamos ver do q se trata, para talvez remover do gráfico
dados.pag <- dadosFil %>% filter(ano %in% c(2015) & tipo=="pagamentos") %>%
arrange(ano, mes, desc(valor))
kable(dados.pag)
# vamos ver do q se trata, para talvez remover do gráfico
dados.pag <- dadosFil %>% filter(ano %in% c(2015) & tipo=="pagamentos" & valor > 200) %>%
arrange(ano, mes, desc(valor))
kable(dados.pag)
dados.cor <- dadosFil %>% filter(ano %in% c(2015) & tipo=="corolla") %>%
arrange(ano, mes, desc(valor))
kable(dados.cor)
month(dadosFil$data[1])
dados.cor <- dadosFil %>% filter(ano %in% c(2015) & tipo=="corolla" & month(data) > 8) %>%
arrange(ano, mes, desc(valor))
kable(dados.cor)
dados.cor <- dadosFil %>% filter(ano %in% c(2015) & tipo=="corolla" & month(data) >= 8) %>%
arrange(ano, mes, desc(valor))
kable(dados.cor)
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
# vamos ver do q se trata, para talvez remover do gráfico
sub <- with(dadosM, ano==2015 & mes=="Mar" & tipo=="pagamentos" )
kable(dadosM[which(sub),1:6])
# vamos ver do q se trata, para talvez remover do gráfico
sub <- with(dadosM, mes %in% c("Jun","Jul") & day(dadosM$data) == 25)
dadosub <- dadosM[which(sub),]
kable(head(dadosub[unique(dadosub$tipo),1:6]))
kable(tail(dadosub[unique(dadosub$tipo),1:6]))
dados.alim <- dadosFil %>% filter(mes %in% c("May","Jul") & tipo=="alimentação" & valor > 50) %>%
arrange(ano, mes, desc(valor))
kable(dados.alim[,1:6])
dados.pag <- dadosFil %>% filter(ano %in% c(2015) & tipo=="pagamentos" & valor > 200) %>%
arrange(ano, mes, desc(valor))
kable(dados.pag[,1:6])
dados.cor <- dadosFil %>% filter(ano %in% c(2015) & tipo=="corolla" & month(data) >= 8) %>%
arrange(ano, mes, desc(valor))
kable(dados.cor[,1:6])
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
library(data.table)
library(dplyr)
library(lubridate)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
library(knitr)
#versão csv
arquivo <- "data/mobills-2015a2017-03.csv"
dados <- read.csv(arquivo)
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
library(markdown)
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
library(data.table)
library(dplyr)
library(lubridate)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
library(knitr)
library(rmarkdown)
#versão csv
arquivo <- "data/mobills-2015a2017-03.csv"
dados <- read.csv(arquivo)
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
installed.packages("httpuv")
install.packages("httpuv")
install.packages("catools")
install.packages("caTools")
library(rmarkdown)
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
library(data.table)
library(dplyr)
library(lubridate)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
library(knitr)
library(rmarkdown)
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
library(rmarkdown)
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
