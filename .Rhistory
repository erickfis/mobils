library(chron)
library(dplyr)
library(lubridate)
library(ggplot2)
library(rmarkdown)
library(RColorBrewer)
library(gridExtra)
library(grid)
dir
dir()
dir("data/"
)
#load-multiplo
lerRds <- 0
if (lerRds==0){
arquivos <- dir("data/")
arquivos <- arquivos[grep("mobills", arquivos)]
dados <- read.csv(paste0("data/", arquivos[1]))
for (i in 2:length(arquivos)) {
dados <- bind_rows(dados, read.csv(paste0("data/", arquivos[i])))
}
dados <- tbl_df(dados)
names(dados) <- tolower(names(dados)) # para facilitar o uso das vars
# # filtrando as informações que interessam,
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
dadosT <- dados %>% rename(tipo = category, valor = amount,
descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(gsub("\\$|,","", valor)),
mes = factor(months(data, abbreviate=TRUE),
levels = c("Jan", "Fev", "Mar", "Abr", "Mai",
"Jun", "Jul", "Ago", "Set", "Out", "Nov",
"Dez"), ordered=TRUE),
ano = factor(year(data))
) %>%
select(data, ano, mes, tipo, descrição, valor)
# Vamos agrupar os dados por tipo de gasto, ano e mes, e depois calcular o total de gastos em cada categoria
dadosT <- tbl_df(dadosT) %>% group_by(tipo, ano, mes)
saveRDS(dadosT, "data/dados-ok.rds")
} else{
dadosT <- readRDS("data/dados-ok.rds")
}
totais <- summarise(dadosT, total=sum(valor))
View(dados)
View(dadosT)
View(totais)
View(totais)
# o gráfico
# as cores:
# Neste caso, temos 20 cat, mas somente 9 cores na paleta brewer padrao
colourCount = length(unique(totais$tipo))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
plt <- ggplot(totais, aes(x=mes, y=total, group=tipo, colour=tipo))
(plt +  geom_line() + geom_point() +
scale_colour_manual(values = getPalette(colourCount))+
facet_grid(ano ~., scale = "free") +
labs(title="Gastos por tipo de despesa", y="Total (R$)", x="Mês") +
theme(plot.title = element_text(hjust = 0.5))
)
sub <- with(dadosM, ano==2015 & mes=="Mar" & tipo=="pagamentos" & valor > 4000)
sub <- with(dadosT, ano==2015 & mes=="Mar" & tipo=="pagamentos" & valor > 4000)
dadosFil <- dadosT[which(!sub),]
dadosFil <- group_by(dadosFil, tipo, ano, mes)
totais <- summarise(dadosFil, total=sum(valor))
plt <- ggplot(totais, aes(x=mes, y=total, group=tipo, colour=tipo))
(plt +  geom_line() + geom_point() +
scale_colour_manual(values = getPalette(colourCount))+
facet_grid(ano ~., scale="free") +
labs(title="Gastos por tipo de despesa", y="Total (R$)", x="Mês") +
theme(plot.title = element_text(hjust = 0.5))
)
View(totais)
totais
sub <- with(dadosT, ano==2015 & mes=="Mar" & tipo=="pagamentos" & valor > 4000)
dadosFil <- dadosT[which(!sub),]
dadosFil <- group_by(dadosFil, tipo, ano, mes)
totais <- summarise(dadosFil, total=sum(valor)) %>%
mutate(media = mean(total))
rm(dados, dadosT) # house cleanning
plt <- ggplot(totais, aes(x=mes, y=total, group=tipo, colour=tipo))
(plt +  geom_line() + geom_point() +
scale_colour_manual(values = getPalette(colourCount))+
facet_grid(ano ~., scale="free") +
labs(title="Gastos por tipo de despesa", y="Total (R$)", x="Mês") +
theme(plot.title = element_text(hjust = 0.5))
)
#devidos subsets
totais.alim <- totais[totais$tipo=="alimentação",]
plt.alim <- ggplot(totais.alim, aes(x=mes, y=total, group=ano, colour=ano))
(plt.alim +  geom_line() +
geom_point(size=0.5, alpha=0.5) +
geom_hline(aes(yintercept = media, colour = ano), linetype=2) +
labs(title="Gastos com alimentação", y="Total (R$)", x="Mês") +
theme(plot.title = element_text(hjust = 0.5))
)
library(swirl)
swirl()
library(knitr)
opts_chunk$set(echo = FALSE, message = FALSE, include = TRUE,
warning = FALSE, autodep = TRUE, options(scipen=999))
library(scales)
library(stringr)
library(data.table)
library(chron)
library(dplyr)
library(lubridate)
library(ggplot2)
library(rmarkdown)
library(RColorBrewer)
library(gridExtra)
library(grid)
# gatilho tem.novidade futuramente vai ser ativado a partir de comparação com o servidor
tem.novidade <- 0
# procurando por db pronto, salvo em rds
arquivos.local <- dir("data/")
tem.rds <- grep("rds", arquivos.local)
# se tem novidade ou falta o rds, processar do começo:
if(tem.novidade==1|length(tem.rds)==0) {
arquivos.local <- arquivos.local[grep("mobills", arquivos.local)]
# dados <- read.csv(paste0("data/", arquivos.local[1]))
dados <- fread(paste0("data/", arquivos.local[1]), na.strings = "")
for (i in 2:length(arquivos.local)) {
dados <- bind_rows(dados, fread(
paste0("data/", arquivos.local[i])
), na.strings = "")
}
dados <- tbl_df(dados)
names(dados) <- tolower(names(dados)) # para facilitar o uso das vars
# # filtrando as informações que interessam,
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
dadosT <- dados %>% rename(tipo = category, valor = amount,
descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(gsub("\\$|,","", valor)),
mes = factor(months(data, abbreviate=TRUE),
levels = c("Jan", "Fev", "Mar", "Abr", "Mai",
"Jun", "Jul", "Ago", "Set", "Out",
"Nov", "Dez"), ordered=TRUE),
ano = factor(year(data))
) %>%
select(data, ano, mes, tipo, descrição, valor)
# Vamos agrupar os dados por tipo de gasto, ano e mes, e depois calcular o total de gastos em cada categoria
dadosT <- dadosT %>% group_by(tipo, ano, mes)
saveRDS(dadosT, "data/dados-ok.rds")
rm(dados)
} else{
dadosT <- readRDS("data/dados-ok.rds")
}
dir("data/")
tem.novidade <- 0
arquivos.local <- dir("data/")
tem.rds <- grep("rds", arquivos.local)
arquivos.local <- arquivos.local[grep("mobills", arquivos.local)]
arquivos.local <- dir("data/")
getwd()
arquivos.local <- dir("data/")
dir("data/")
arquivos.local <- dir("data/")
arquivos.local <- dir("data/")
dir("data/")
arquivos.local <- dir("data/")
arquivos.local <- dir("data/")
arquivos.local <- dir("../data/")
tem.rds <- grep("rds", arquivos.local)
arquivos.local <- arquivos.local[grep("mobills", arquivos.local)]
dados <- fread(paste0("data/", arquivos.local[1]), na.strings = "")
# gatilho tem.novidade futuramente vai ser ativado a partir de comparação com o servidor
tem.novidade <- 0
# procurando por db pronto, salvo em rds
arquivos.local <- dir("../data/")
tem.rds <- grep("rds", arquivos.local)
# se tem novidade ou falta o rds, processar do começo:
if(tem.novidade==1|length(tem.rds)==0) {
arquivos.local <- arquivos.local[grep("mobills", arquivos.local)]
# dados <- read.csv(paste0("data/", arquivos.local[1]))
dados <- fread(paste0("../data/", arquivos.local[1]), na.strings = "")
for (i in 2:length(arquivos.local)) {
dados <- bind_rows(dados, fread(
paste0("../data/", arquivos.local[i])
), na.strings = "")
}
dados <- tbl_df(dados)
names(dados) <- tolower(names(dados)) # para facilitar o uso das vars
# # filtrando as informações que interessam,
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
dadosT <- dados %>% rename(tipo = category, valor = amount,
descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(gsub("\\$|,","", valor)),
mes = factor(months(data, abbreviate=TRUE),
levels = c("Jan", "Fev", "Mar", "Abr", "Mai",
"Jun", "Jul", "Ago", "Set", "Out",
"Nov", "Dez"), ordered=TRUE),
ano = factor(year(data))
) %>%
select(data, ano, mes, tipo, descrição, valor)
# Vamos agrupar os dados por tipo de gasto, ano e mes, e depois calcular o total de gastos em cada categoria
dadosT <- dadosT %>% group_by(tipo, ano, mes)
saveRDS(dadosT, "data/dados-ok.rds")
rm(dados)
} else{
dadosT <- readRDS("data/dados-ok.rds")
}
dados <- fread(paste0("../data/", arquivos.local[1]), na.strings = "")
dados <- bind_rows(dados, fread(
paste0("../data/", arquivos.local[2])
), na.strings = "")
for (i in 2:length(arquivos.local)) {
dados <- bind_rows(dados, fread(
paste0("../data/", arquivos.local[i]),
na.strings = "")
)
}
# gatilho tem.novidade futuramente vai ser ativado a partir de comparação com o servidor
tem.novidade <- 0
# procurando por db pronto, salvo em rds
arquivos.local <- dir("../data/")
tem.rds <- grep("rds", arquivos.local)
# se tem novidade ou falta o rds, processar do começo:
if(tem.novidade==1|length(tem.rds)==0) {
arquivos.local <- arquivos.local[grep("mobills", arquivos.local)]
# dados <- read.csv(paste0("data/", arquivos.local[1]))
dados <- fread(paste0("../data/", arquivos.local[1]), na.strings = "")
for (i in 2:length(arquivos.local)) {
dados <- bind_rows(dados, fread(
paste0("../data/", arquivos.local[i]),
na.strings = "")
)
}
dados <- tbl_df(dados)
names(dados) <- tolower(names(dados)) # para facilitar o uso das vars
# # filtrando as informações que interessam,
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
dadosT <- dados %>% rename(tipo = category, valor = amount,
descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(gsub("\\$|,","", valor)),
mes = factor(months(data, abbreviate=TRUE),
levels = c("Jan", "Fev", "Mar", "Abr", "Mai",
"Jun", "Jul", "Ago", "Set", "Out",
"Nov", "Dez"), ordered=TRUE),
ano = factor(year(data))
) %>%
select(data, ano, mes, tipo, descrição, valor)
# Vamos agrupar os dados por tipo de gasto, ano e mes, e depois calcular o total de gastos em cada categoria
dadosT <- dadosT %>% group_by(tipo, ano, mes)
saveRDS(dadosT, "data/dados-ok.rds")
rm(dados)
} else{
dadosT <- readRDS("data/dados-ok.rds")
}
# gatilho tem.novidade futuramente vai ser ativado a partir de comparação com o servidor
tem.novidade <- 0
# procurando por db pronto, salvo em rds
arquivos.local <- dir("../data/")
tem.rds <- grep("rds", arquivos.local)
# se tem novidade ou falta o rds, processar do começo:
if(tem.novidade==1|length(tem.rds)==0) {
arquivos.local <- arquivos.local[grep("mobills", arquivos.local)]
# dados <- read.csv(paste0("data/", arquivos.local[1]))
dados <- fread(paste0("../data/", arquivos.local[1]), na.strings = "")
for (i in 2:length(arquivos.local)) {
dados <- bind_rows(dados, fread(
paste0("../data/", arquivos.local[i]),
na.strings = "")
)
}
dados <- tbl_df(dados)
names(dados) <- tolower(names(dados)) # para facilitar o uso das vars
# # filtrando as informações que interessam,
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
dadosT <- dados %>% rename(tipo = category, valor = amount,
descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(gsub("\\$|,","", valor)),
mes = factor(months(data, abbreviate=TRUE),
levels = c("Jan", "Fev", "Mar", "Abr", "Mai",
"Jun", "Jul", "Ago", "Set", "Out",
"Nov", "Dez"), ordered=TRUE),
ano = factor(year(data))
) %>%
select(data, ano, mes, tipo, descrição, valor)
# Vamos agrupar os dados por tipo de gasto, ano e mes, e depois calcular o total de gastos em cada categoria
dadosT <- dadosT %>% group_by(tipo, ano, mes)
saveRDS(dadosT, "../data/dados-ok.rds")
rm(dados)
} else{
dadosT <- readRDS("data/dados-ok.rds")
}
totais <- summarise(dadosT, total=sum(valor))
# o gráfico
# as cores:
# Neste caso, temos 20 cat, mas somente 9 cores na paleta brewer padrao
colourCount = length(unique(totais$tipo))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
plt <- ggplot(totais, aes(x=mes, y=total, group=tipo, colour=tipo))
(plt +  geom_line() + geom_point() +
scale_colour_manual(values = getPalette(colourCount))+
facet_grid(ano ~., scale = "free") +
labs(title="Gastos por tipo de despesa", y="Total (R$)", x="Mês") +
theme(plot.title = element_text(hjust = 0.5))
)
# vamos ver do q se trata, para talvez remover do gráfico
sub <- with(dadosT, ano==2015 & mes=="Mar" & tipo=="pagamentos" )
kable(dadosT[which(sub),1:6])
# vamos ver do q se trata, para talvez remover do gráfico
sub <- with(dadosT, mes %in% c("Jun","Jul") & day(dadosT$data) == 25)
dadosub <- dadosT[which(sub),]
kable(head(dadosub[unique(dadosub$tipo),1:6]))
kable(tail(dadosub[unique(dadosub$tipo),1:6]))
# retirando ponto do db
sub <- with(dadosT, ano==2015 & mes=="Mar" & tipo=="pagamentos" & valor > 4000)
dadosFil <- dadosT[which(!sub),]
dadosFil <- group_by(dadosFil, tipo, ano, mes)
totais <- summarise(dadosFil, total=sum(valor)) %>%
mutate(media = mean(total))
rm(dadosT) # house cleanning
plt <- ggplot(totais, aes(x=mes, y=total, group=tipo, colour=tipo))
(plt +  geom_line() + geom_point() +
scale_colour_manual(values = getPalette(colourCount))+
facet_grid(ano ~., scale="free") +
labs(title="Gastos por tipo de despesa", y="Total (R$)", x="Mês") +
theme(plot.title = element_text(hjust = 0.5))
)
library(datasets)
mean(mtcars$mpg)
mean(mtcars$mpg) + c(-1,1)*qnorm(.975)*sd(mtcars$mpg)/sqrt(length(mtcars$mpg))
mean(mtcars$mpg) + c(-1,1)*qnorm(.05)*sd(mtcars$mpg)/sqrt(length(mtcars$mpg))
mtcars
mtcars[1:10,]
grp4 <- with(mtcars, subset(cyl==4))
?subset()
grp4 <- subset(mtcars, cyl==4))
grp4 <- subset(mtcars, cyl==4)
grp6 <- subset(mtcars, cyl==6)
grp4
grp6
g4 <- mtcars$mpg[cyl==4]
g4 <- mtcars$mpg[mtcars$cyl==4]
g6 <- mtcars$mpg[mtcars$cyl==6]
t.test(g4, g6, paired = FALSE, alternative = "two.sided", var.equal = FALSE)
t.test(g4, g6, paired = FALSE, alternative = "one.sided", var.equal = FALSE)
t.test(g4, g6, paired = FALSE, alternative = "greater", var.equal = FALSE)
t.test(g4, g6, paired = FALSE, alternative = "less", var.equal = FALSE)
3) + c(-1,1)*qnorm(.975)*1,1/sqrt(100))
3 + c(-1,1)*qnorm(.975)*1,1/sqrt(100))
3 + c(-1,1)*qnorm(.975)*1,1/sqrt(100)
3 + c(-1,1)*qnorm(.975)*1.1/sqrt(100)
50 + c(-1,1)*qnorm(.975)*0.5/sqrt(100)
binom.test(50,100, alternative = "greater")
pbinom(54, prob = .5, size=100, lower.tail = FALSE)
mean(mtcars$mpg) - qnorm(.95)*sd(mtcars$mpg)/sqrt(length(mtcars$mpg))
mean(mtcars$mpg)
mean(mtcars$mpg) - qnorm(.05)*sd(mtcars$mpg)/sqrt(length(mtcars$mpg))
mean(mtcars$mpg) + qnorm(.05)*sd(mtcars$mpg)/sqrt(length(mtcars$mpg))
mean(mtcars$mpg) + qnorm(.95)*sd(mtcars$mpg)/sqrt(length(mtcars$mpg))
g4 <- mtcars$mpg[mtcars$cyl==4]
g6 <- mtcars$mpg[mtcars$cyl==6]
?t.test(g4, g6, )
?t.test(g4, g6, alternative = "two.sided", paired=FALSE, var.equal=FALSE)
t.test(g4, g6, alternative = "two.sided", paired=FALSE, var.equal=FALSE)
mean(g4)
mean(g4) - mean(g6) + c(-1,1)*qt
mean(g4) - mean(g6) + c(-1,1)*qt(.975,n4+n6-2)*sqrt(((n4-1)*s4^2 + (n6-1)*s6^2)/(n4+n6-2))*sqrt(1/n4 + 1/n6)
n4 <- length(g4)
n6 <- length(g6)
s4 <- sd(g4)
s6 <- sd(g6)
mean(g4) - mean(g6) + c(-1,1)*qt(.975,n4+n6-2)*sqrt(((n4-1)*s4^2 + (n6-1)*s6^2)/(n4+n6-2))*sqrt(1/n4 + 1/n6)
mean(g4) - mean(g6) +
c(-1,1)*qt(.975,n4+n6-2)*
sqrt(((n4-1)*s4^2 + (n6-1)*s6^2))/(n4+n6-2))*
sqrt(1/n4 + 1/n6)
mean(g4) - mean(g6) + c(-1,1)*qt(.975,n4+n6-2)*sqrt(((n4-1)*s4^2 + (n6-1)*s6^2))/(n4+n6-2))*sqrt(1/n4 + 1/n6)
(mean(g4) - mean(g6) +
c(-1,1)*qt(.975,n4+n6-2)*
sqrt(((n4-1)*(s4^2) + (n6-1)*(s6^2))/(n4+n6-2))*
sqrt(1/n4 + 1/n6)
)
t.test(g4, g6, alternative = "two.sided", paired=FALSE, var.equal=FALSE)
(mean(g4) - mean(g6) +
c(-1,1)*qt(.95,n4+n6-2)*
sqrt(((n4-1)*(s4^2) + (n6-1)*(s6^2))/(n4+n6-2))*
sqrt(1/n4 + 1/n6)
)
(mean(g4) - mean(g6) +
c(-1,1)*qt(.975,(n4+n6-2))*
sqrt(((n4-1)*(s4^2) + (n6-1)*(s6^2))/(n4+n6-2))*
sqrt(1/n4 + 1/n6)
)
pt
pt()
?pt()
pt(3.15,17,ncp=16.66-19.74)
pt(3.15,17,ncp=26.66-19.74)
pnorm(3.15, mean=26.66-19.74, sd=sd(g4))
pnorm(3.15, mean=26.66-19.74, sd=sd(g6))
?poisson.test()
3 + c(-1,1)*qnorm(.975)*1,1/10
3 + c(-1,1)*qnorm(.975)*1.1/10
binom.test(55,100, alternative = "greater")
binom.test(55,100, alternative = "less")
50 + c(-1,1)*qbinom(55,100,.5)
50 + c(-1,1)*qbinom(.55,100,.5)
50 + c(-1,1)*qbinom(.55,100,.5)*0.5/10
pbinom(54,100,.5, lower.tail = FALSE)
binom.test(55,100, alternative = "less")
pbinom(63,100,.5, lower.tail = FALSE)
pbinom(60,100,.5, lower.tail = FALSE)
pbinom(62,100,.5, lower.tail = FALSE)
pbinom(63,100,.5, lower.tail = FALSE)
pbinom(64,100,.5, lower.tail = FALSE)
pbinom(58,100,.5, lower.tail = FALSE)
pbinom(56,100,.5, lower.tail = FALSE)
pbinom(57,100,.5, lower.tail = FALSE)
50 + c(-1,1)*qbinom(.55,100,.5)*0.5/10
?qbinom()
50 + c(-1,1)*qbinom(.5,100,.5)*0.5/10
50 + c(-1,1)*qbinom(.95,100,.5)*0.5/10
pbinom(53,100,.5, lower.tail = FALSE)
pbinom(54,100,.5, lower.tail = FALSE)
binom.test(55,100,alternative = "greater")
binom.test(55,100,alternative = "less")
binom.test(55,100,alternative = "greater")
50 + c(-1,1)*qbinom(.95,100,.5)*0.5/10
.25^2
50 + c(-1,1)*qbinom(.95,100,.5)*sqrt(0.5)/10
sqrt(.5)
50 + c(-1,1)*qbinom(.95,100,.5)*sqrt(0.5)/10
binom.test(55,100,alternative = "greater")
15800/30
ppois(526,520, lower.tail = FALSE)
ppois(525,520, lower.tail = FALSE)
poisson.test(520,30)
poisson.test(x = 520*30, T=30)
?poisson.test()
poisson.test(x = 526, T=30, r=520, alternative = "greater")
poisson.test(x = 526, T=30, r=520, alternative = "less")
poisson.test(x = 15800, T=30, r=520, alternative = "greater")
poisson.test(x = 15800, T=30, r=520, alternative = "less")
poisson.test(x = 15800, T=30, r=520, alternative = "two.sided")
poisson.test(x = 15800, T=30, r=520, alternative = "greater")
520 + qpois(.95,520*30)*sqrt(520/30)/sqrt(30)
520*30 + qpois(.95,520*30)*sqrt(520/30)/sqrt(30)
520*30
qpois(.95,520*30)
qpois(.95,520*30)*sqrt(520/30)
520 + qnorm(.95)*sqrt(520/30)
ppois(525, 520, lower.tail = FALSE)
ppois(15800-1, 520*30, lower.tail = FALSE)
50 + c(1)*qnorm(.95)*sqrt(0.25)/10
50 + c(1)*qnorm(.95)*sqrt(0.25)
sqrt(0.25)
50 + c(1)*qnorm(.95)*sqrt(0.5)
binom.test(55,100, alternative = "greater")
binom.test(56,100, alternative = "greater")
binom.test(55,100, alternative = "greater")
.56 +c(-1,1)*qnorm(0.95)*sqrt(.56*(1-.56))/10
.55 +c(-1,1)*qnorm(0.95)*sqrt(.55*(1-.55))/10
binom.test(55,100, alternative = "less")
.55 +qnorm(0.95)*sqrt(.55*(1-.55))/10
binom.test(55,100, alternative = "greater")
binom.test(55,100, alternative = "greater", p = .55)
binom.test(55,100, alternative = "greater")
binom.test(55,100, alternative = "greater")$p-value
ppois(15800-1, 520*30, lower.tail = FALSE)
520 + qnorm(.95)*sqrt(520/30)
qnorm(.975)
1 + c(-1,1)*qnorm(.975)*4/10
0 + c(-1,1)*qnorm(.975)*4/10
se <- 4*sqrt(2/100)
1/se
pnorm(1/se)
pnorm(-1/se)
2*pnorm(-1/se)
2*pnorm(1/se, lower.tail = FALSE)
library(swirl)
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
R.version
R.version$platform
