summarise(total=sum(total), media = mean(total), sd=sd(total))
View(maiores)
maiores <- totais %>% group_by(ano, tipo) %>%
summarise(total=sum(total), media = mean(total), sd=sd(total))
maiores <- totais %>% group_by(ano, tipo) %>%
summarise(total=sum(total), media = mean(total), sd=sd(total)) %>%
arrange(ano,desc(total))
maiores <- totais %>% group_by(tipo, ano) %>%
summarise(total=sum(total), media = mean(total), sd=sd(total)) %>%
arrange(ano,desc(total))
maiores <- totais %>% group_by(tipo, ano) %>%
summarise(total=sum(total), media = mean(total), sd=sd(total)) %>%
arrange(desc(total))
maiores <- totais %>% group_by(ano, tipo) %>%
summarise(Total=sum(total), media = mean(Total), sd=sd(total)) %>%
arrange(desc(total))
maiores <- totais %>% group_by(ano, tipo) %>%
summarise(Total=sum(total), media = mean(Total), sd=sd(Total)) %>%
arrange(desc(total))
maiores <- totais %>% group_by(ano, tipo) %>%
summarise(Total=sum(total), media = mean(Total), sd=sd(total)) %>%
arrange(desc(Total))
maiores <- totais %>% group_by(tipo) %>%
summarise(Total=sum(total), media = mean(Total), sd=sd(total)) %>%
arrange(desc(Total))
maiores <- totais %>% group_by(tipo) %>%
summarise(Total=sum(total), media = mean(total), sd=sd(total)) %>%
arrange(desc(Total))
View(totais)
maiores <- totais %>% group_by(tipo, ano) %>%
summarise(total.anual=sum(total), media.anual = mean(total), sd=sd(total)) %>%
arrange(desc(Total))
maiores <- totais %>% group_by(tipo, ano) %>%
summarise(total.anual=sum(total), media.anual = mean(total), sd=sd(total)) %>%
arrange(desc(total.anual), ano, tipo)
maiores <- totais %>% group_by(tipo, ano) %>%
summarise(total.anual=sum(total), media.anual = mean(total), sd.anual=sd(total)) %>%
mutate(media.total = mean(total.anual)) %>%
arrange(desc(media.total), ano, tipo)
maiores <- totais %>% group_by(tipo, ano) %>%
summarise(total.anual=sum(total), media.anual = mean(total), sd.anual=sd(total)) %>%
mutate(media.total = mean(total.anual)) %>%
arrange(desc(media.total), ano, tipo) %>%
mutate(rank = 1:length(media.total))
View(totais)
View(maiores)
maiores.df.plot <-  totais %>% group_by(tipo) %>%
summarise(media = round(mean(total),2)) %>%
arrange(desc(media))
View(maiores.df.plot)
View(totais)
View(maiores)
maiores.df.plot <-  maiores %>% group_by(tipo) %>%
summarise(media = round(mean(total.anual),2)) %>%
arrange(desc(media))
View(maiores.df.plot)
View(maiores.df.plot)
View(maiores)
maiores.df.plot <-  maiores %>% group_by(tipo) %>%
summarise(media = round(mean(total.anual),2)) %>%
arrange(desc(media)) %>%
mutate(rank = 1:length(media))
View(maiores.df.plot)
maiores.df.plot$tipo <- factor(maiores.df.plot$tipo,
levels = maiores.df.plot$tipo[order(maiores.df.plot$rank)])
maiores <- totais %>% group_by(tipo, ano) %>%
summarise(total.anual=sum(total), media.anual = round(mean(total),2),
sd.anual=sd(total)) %>%
mutate(media.total = round(mean(total.anual),2)) %>%
arrange(desc(media.total), ano, tipo)
kable(maiores[,c(1,6,2:5)])
library(knitr)
opts_chunk$set(echo = FALSE, message = FALSE, include = TRUE,
warning = FALSE, autodep = TRUE, options(scipen=999))
maiores <- totais %>% group_by(tipo, ano) %>%
summarise(total.anual=sum(total), media.anual = round(mean(total),2),
sd.anual=sd(total)) %>%
mutate(media.total = round(mean(total.anual),2)) %>%
arrange(desc(media.total), ano, tipo)
kable(maiores[,c(1,6,2:5)])
maiores.df.plot <-  maiores %>% group_by(tipo) %>%
summarise(media = round(mean(total.anual),2)) %>%
arrange(desc(media)) %>%
mutate(rank = 1:length(media))
maiores.df.plot$tipo <- factor(maiores.df.plot$tipo,
levels = maiores.df.plot$tipo[order(maiores.df.plot$rank)])
colourCount = length(unique(maiores.df.plot$tipo))
getPalette = colorRampPalette(brewer.pal(colourCount, "Set1"))
maiores.plt <- ggplot(maiores.df.plot, aes(tipo, media, fill=tipo))
maiores.plt <- maiores.plt + geom_bar(stat="identity") +
geom_text(aes(label=ifelse(media==max(media),
paste0(tipo, ": ", max(media), " killed"),'')),
hjust=0,vjust=2) +
# geom_hline(aes(yintercept = median), linetype=2) +
labs(title="All time", y="",
x="") +
theme(legend.position="none") +
scale_colour_manual(values = getPalette(colourCount.fatal.all))+
theme(legend.title=element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(plot.title = element_text(hjust = 0.5))
maiores.plt + labs(title="Total Fatalities - All time",
subtitle="Most fatal events of all time",
y="Fatalities", x="")
maiores.plt
maiores.df.plot <-  maiores %>% group_by(tipo) %>%
summarise(media = round(mean(total.anual),2)) %>%
arrange(desc(media)) %>%
mutate(rank = 1:length(media))
maiores.df.plot$tipo <- factor(maiores.df.plot$tipo,
levels = maiores.df.plot$tipo[order(maiores.df.plot$rank)])
colourCount = length(unique(maiores.df.plot$tipo))
getPalette = colorRampPalette(brewer.pal(colourCount, "Set1"))
maiores.plt <- ggplot(maiores.df.plot, aes(tipo, media, fill=tipo))
maiores.plt <- maiores.plt + geom_bar(stat="identity") +
geom_text(aes(label=ifelse(media==max(media),
paste0(tipo, ": ", max(media), " killed"),'')),
hjust=0,vjust=2) +
# geom_hline(aes(yintercept = median), linetype=2) +
labs(title="Maiores tipos de despesas", y="Reais",
x="Tipos de despesas") +
theme(legend.position="none") +
scale_colour_manual(values = getPalette(colourCount.fatal.all))+
theme(legend.title=element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(plot.title = element_text(hjust = 0.5))
maiores.plt
maiores.df.plot <-  maiores %>% group_by(tipo) %>%
summarise(media = round(mean(total.anual),2)) %>%
arrange(desc(media)) %>%
mutate(rank = 1:length(media))
maiores.df.plot$tipo <- factor(maiores.df.plot$tipo,
levels = maiores.df.plot$tipo[order(maiores.df.plot$rank)])
colourCount = length(unique(maiores.df.plot$tipo))
getPalette = colorRampPalette(brewer.pal(colourCount, "Set1"))
maiores.plt <- ggplot(maiores.df.plot, aes(tipo, media, fill=tipo))
maiores.plt <- maiores.plt + geom_bar(stat="identity") +
geom_text(aes(label=ifelse(media==max(media),
paste0(tipo, ": ", dollar(max(media))),'')),
hjust=0,vjust=2) +
# geom_hline(aes(yintercept = median), linetype=2) +
labs(title="Maiores tipos de despesas", y="Reais",
x="Tipos de despesas") +
theme(legend.position="none") +
scale_colour_manual(values = getPalette(colourCount.fatal.all))+
theme(legend.title=element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(plot.title = element_text(hjust = 0.5))
maiores.plt
library("UsingR")
install.packages("UsingR")
library(UsingR)
data("father.son")
x <- father.son$sheight
n <-length(x)
B <- 10
sample(x, 10)
resamples <- matrix(sample(x, n*B, replace = TRUE), B, n)
resamples
dim(resamples)
medias <- apply(resamples, 1, median)
medias
library(knitr)
opts_chunk$set(echo = FALSE, message = FALSE, include = TRUE,
warning = FALSE, autodep = TRUE, options(scipen=999))
library(scales)
library(stringr)
library(data.table)
library(chron)
library(dplyr)
library(lubridate)
library(ggplot2)
library(rmarkdown)
library(RColorBrewer)
library(gridExtra)
library(grid)
# gatilho tem.novidade futuramente vai ser ativado a partir de comparação com o servidor
tem.novidade <- 0
# procurando por db pronto, salvo em rds
arquivos.local <- dir("../data/")
tem.rds <- file.exists("../data/dados-ok.rds")
# se tem novidade ou falta o rds, processar do começo:
if(tem.novidade==1|!tem.rds) {
arquivos.local <- arquivos.local[grep("mobills", arquivos.local)]
# dados <- read.csv(paste0("data/", arquivos.local[1]))
dados <- fread(paste0("../data/", arquivos.local[1]), na.strings = "")
for (i in 2:length(arquivos.local)) {
dados <- bind_rows(dados, fread(
paste0("../data/", arquivos.local[i]),
na.strings = "")
)
}
dados <- tbl_df(dados)
names(dados) <- tolower(names(dados)) # para facilitar o uso das vars
# # filtrando as informações que interessam,
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
dadosT <- dados %>% rename(tipo = category, valor = amount,
descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(gsub("\\$|,","", valor)),
mes = factor(months(data, abbreviate=TRUE),
levels = c("Jan", "Fev", "Mar", "Abr", "Mai",
"Jun", "Jul", "Ago", "Set", "Out",
"Nov", "Dez"), ordered=TRUE),
ano = factor(year(data))
) %>%
select(data, ano, mes, tipo, descrição, valor)
# Vamos agrupar os dados por tipo de gasto, ano e mes, e depois calcular o total de gastos em cada categoria
dadosT <- dadosT %>% group_by(tipo, ano, mes)
saveRDS(dadosT, "../data/dados-ok.rds")
rm(dados)
} else{
dadosT <- readRDS("../data/dados-ok.rds")
}
totais <- summarise(dadosT, total=sum(valor))
# retirando ponto do db
sub <- with(dadosT, ano==2015 & mes=="Mar" & tipo=="pagamentos" & valor > 4000)
dadosFil <- dadosT[which(!sub),]
dadosFil <- group_by(dadosFil, tipo, ano, mes)
totais <- summarise(dadosFil, total=sum(valor)) %>%
mutate(media = mean(total))
rm(dadosT) # house cleanning
maiores <- totais %>% group_by(tipo, ano) %>%
summarise(total.anual=sum(total), media.anual = round(mean(total),2),
sd.anual=sd(total)) %>%
mutate(media.total = round(mean(total.anual),2)) %>%
arrange(desc(media.total), ano, tipo)
kable(maiores[1:20,c(1,6,2:5)])
View(totais)
maiores <- totais %>% group_by(tipo, ano) %>%
summarise(media.mes.ano = round(mean(total),2),
sd.mes.ano=sd(total)) %>%
mutate(media.mes.geral = round(mean(media.mes.ano),2)) %>%
arrange(desc(media.mes.geral), ano, tipo)
kable(maiores[1:20,c(1,6,2:5)])
maiores <- totais %>% group_by(tipo, ano) %>%
summarise(media.mensal.ano = round(mean(total),2),
sd.mensal.ano=sd(total)) %>%
mutate(media.mensal.geral = round(mean(media.mensal.ano),2)) %>%
arrange(desc(media.mensal.geral), ano, tipo)
kable(maiores[1:20,])
maiores <- totais %>% group_by(tipo, ano) %>%
summarise(media.mensal.ano = round(mean(total),2),
round(sd.mensal.ano=sd(total))) %>%
mutate(media.mensal.geral = round(mean(media.mensal.ano),2)) %>%
arrange(desc(media.mensal.geral), ano, tipo)
kable(maiores[1:20,])
maiores <- totais %>% group_by(tipo, ano) %>%
summarise(media.mensal.ano = round(mean(total),2),
sd.mensal.ano=round(sd(total))) %>%
mutate(media.mensal.geral = round(mean(media.mensal.ano),2)) %>%
arrange(desc(media.mensal.geral), ano, tipo)
kable(maiores[1:20,])
maiores <- totais %>% group_by(tipo, ano) %>%
summarise(media.mensal.ano = round(mean(total),2),
sd.mensal.ano=round(sd(total)), 2) %>%
mutate(media.mensal.geral = round(mean(media.mensal.ano),2)) %>%
arrange(desc(media.mensal.geral), ano, tipo)
kable(maiores[1:20,])
maiores <- totais %>% group_by(tipo, ano) %>%
summarise(media.mensal.ano = round(mean(total),2),
sd.mensal.ano=round(sd(total), 2)) %>%
mutate(media.mensal.geral = round(mean(media.mensal.ano),2)) %>%
arrange(desc(media.mensal.geral), ano, tipo)
kable(maiores[1:20,])
maiores.df.plot <-  maiores %>% group_by(tipo) %>%
summarise(media = round(mean(media.mensal.ano),2)) %>%
arrange(desc(media)) %>%
mutate(rank = 1:length(media))
maiores.df.plot$tipo <- factor(maiores.df.plot$tipo,
levels = maiores.df.plot$tipo[order(maiores.df.plot$rank)])
colourCount = length(unique(maiores.df.plot$tipo))
getPalette = colorRampPalette(brewer.pal(colourCount, "Set1"))
maiores.plt <- ggplot(maiores.df.plot, aes(tipo, media, fill=tipo))
maiores.plt <- maiores.plt + geom_bar(stat="identity") +
geom_text(aes(label=ifelse(media==max(media),
paste0(tipo, ": ", dollar(max(media))),'')),
hjust=0,vjust=2) +
# geom_hline(aes(yintercept = median), linetype=2) +
labs(title="Maiores tipos de despesas", y="Média em Reais",
x="Tipos de despesas") +
theme(legend.position="none") +
scale_colour_manual(values = getPalette(colourCount.fatal.all))+
theme(legend.title=element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(plot.title = element_text(hjust = 0.5))
maiores.plt
View(maiores.df.plot)
m.variacoes <- ungroup(maiores) %>%
arrange(desc(sd.mensal.ano)) %>%
mutate(rank = 1:length(media))
m.variacoes <- ungroup(maiores) %>%
arrange(desc(sd.mensal.ano)) %>%
mutate(rank = 1:length(sd.mensal.ano))
kable(m.variacoes[1:20, c(6,1:4)])
system(uname -a)
?system()
system("lsb_release -a")
system("lsb_release -a")[2]
teste <- system("lsb_release -a")
teste
teste <- system("lsb_release -a")
teste <- as.character(system("lsb_release -a"))
tete
teste
teste <- system("lsb_release -a", intern = TRUE)
teste
system("lsb_release -a", intern = TRUE)[2]
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.local[grep("mobills", arquivos.local)]
# gatilho tem.novidade futuramente vai ser ativado a partir de comparação com o servidor
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.ftp, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
# procurando por db pronto, salvo em rds
tem.rds <- file.exists("../data/dados-ok.rds")
# se tem novidade ou falta o rds, processar do começo:
if(tem.novidade==1|!tem.rds) {
# dados <- read.csv(paste0("data/", arquivos.local[1]))
dados <- fread(paste0("../data/", arquivos.atual[1]), na.strings = "")
for (i in 2:length(arquivos.atual)) {
dados <- bind_rows(dados, fread(
paste0("../data/", arquivos.atual[i]),
na.strings = "")
)
}
dados <- tbl_df(dados)
names(dados) <- tolower(names(dados)) # para facilitar o uso das vars
# # filtrando as informações que interessam,
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
dadosT <- dados %>% rename(tipo = category, valor = amount,
descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(gsub("\\$|,","", valor)),
mes = factor(months(data, abbreviate=TRUE),
levels = c("Jan", "Fev", "Mar", "Abr", "Mai",
"Jun", "Jul", "Ago", "Set", "Out",
"Nov", "Dez"), ordered=TRUE),
ano = factor(year(data))
) %>%
select(data, ano, mes, tipo, descrição, valor)
# Vamos agrupar os dados por tipo de gasto, ano e mes, e depois calcular o total de gastos em cada categoria
dadosT <- dadosT %>% group_by(tipo, ano, mes)
saveRDS(dadosT, "../data/dados-ok.rds")
rm(dados)
} else{
dadosT <- readRDS("../data/dados-ok.rds")
}
totais <- summarise(dadosT, total=sum(valor))
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.ftp, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.ftp, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.ftp, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.ftp, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
