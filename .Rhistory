# o gráfico
# as cores:
# Neste caso, temos 20 cat, mas somente 9 cores na paleta brewer padrao
colourCount = length(unique(totais$tipo))
getPalette = colorRampPalette(brewer.pal(colourCount, "Set1"))
plt.p1 <- ggplot(totais, aes(x=mes, y=total.raw, group=tipo, colour=tipo,
text = paste(ano, "-", mes,
"<br>", tipo,
"<br>", total)))
plt.p1 <- plt.p1 +  geom_line() + geom_point() +
scale_colour_manual(values = getPalette(colourCount))+
facet_grid(ano ~., scale = "free") +
labs(title="Gastos por tipo de despesa - dados não-filtrados",
y="Total (R$)", x="Mês") +
theme(legend.position="bottom") +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(plt.p1, tooltip = "text")
## abertura pet
indices <- grep("multa", dadosT$descrição)
View(dadosT[indices,])
## abertura pet
indices <- grep("multa aluguel", dadosT$descrição)
View(dadosT[indices,])
## abertura pet
indices <- grep("multa aluguel", dadosT$descrição)
View(dadosT[indices,])
## funilaria
indices <- grep("funilaria", dadosT$descrição)
View(dadosT[indices,])
## passagem
indices <- grep("passagem", dadosT$descrição)
View(dadosT[indices,])
## passagem
indices <- grep("passagem aérea", dadosT$descrição)
## passagem
indices <- grep("passagem (aérea|mi)", dadosT$descrição)
View(dadosT[indices,])
## passagem
indices <- grep("passagem (aérea|mi|doni)", dadosT$descrição)
View(dadosT[indices,])
indices <- grep("passagem", dadosT$descrição)
View(dadosT[indices,])
## passagem
indices <- grep("passagem (aérea|mi|doni)", dadosT$descrição)
View(dadosT[indices,])
# retirando ponto do db
sub <- with(dadosT, tipo=="moradia" & valor.raw > 400)
dadosT[sub,]
View(dadosT[sub,])
# retirando ponto do db
sub <- with(dadosT, tipo=="moradia" & valor.raw > 350)
View(dadosT[sub,])
# retirando ponto do db
sub <- with(dadosT, tipo=="moradia" & valor.raw > 350)
indices <- grep("novo carro", dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
## abertura pet
indices <- grep("abertura pet", dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
## funilaria
indices <- grep("funilaria", dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
## passagem
indices <- grep("passagem (aérea|mi|doni)", dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
# retirando ponto do db
sub <- with(dadosT, tipo=="moradia" & valor.raw > 350)
dadosFil <- dadosT[!sub,]
# retirando ponto do db
sub <- with(dadosFil, ano==2015 & mes=="Mar" & tipo=="pagamentos" & valor.raw > 4000)
dadosFil <- dadosFil[!sub,] %>% group_by(tipo, ano, mes)
View(dadosFil)
indices <- grep("previsão", dadosFil$descrição)
View(dadosFil[indices,])
indices <- grep("previs.", dadosFil$descrição)
View(dadosFil[indices,])
#cooperpecas
indices <- grep("cooperpecas", dadosT$descrição)
View(dadosT[indices,])
#cooperpecas
indices <- grep("cooperpecas|cole", dadosT$descrição)
View(dadosT[indices,])
#cooperpecas, cole, ajuste
indices <- grep("cooperpecas|cole|ajuste", dadosT$descrição)
View(dadosT[indices,])
#cooperpecas, cole, ajuste
indices <- grep("cooperpecas|cole|ajuste|baixa", dadosT$descrição)
View(dadosT[indices,])
indices <- grep("previs.", dadosT$descrição)
# View(dadosT[indices,])
dadosT <- dadosT[
indices <- grep("novo carro", dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
indices <- grep("novo carro", dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
## abertura pet
indices <- grep("abertura pet", dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
## funilaria
indices <- grep("funilaria", dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
## passagem
indices <- grep("passagem (aérea|mi|doni)", dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
#cooperpecas, cole, ajuste
indices <- grep("cooperpecas|cole|ajuste|baixa", dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
#mudanças
sub <- with(dadosT, tipo=="moradia" & valor.raw > 350)
#View(dadosT[sub,])
dadosFil <- dadosT[!sub,]
# retirando ponto do db
sub <- with(dadosFil, ano==2015 & mes=="Mar" & tipo=="pagamentos" & valor.raw > 4000)
dadosFil <- dadosFil[!sub,] %>% group_by(tipo, ano, mes)
library(knitr)
library(rmarkdown)
library(magrittr)
library(here)
library(lubridate)
library(readxl)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(scales)
library(stringr)
library(grid)
library(gridExtra)
library(plotly)
# gatilho tem.novidade futuramente vai ser ativado a partir de comparação com o servidor
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
#arquivos.atual <- dir("../data/")
arquivos.atual <- dir(here::here("data"))
arquivos.atual <- arquivos.atual[grep("mobils", arquivos.atual)]
# if (file.exists("../data/lista.txt")) {
#         data.previous <- readLines("../data/lista.txt")
#                 if (identical(data.previous,arquivos.atual)) {
#                         tem.novidade <- 0
#                 } else {
#                         tem.novidade <- 1
#                         writeLines(arquivos.atual, "../data/lista.txt")
#                 }
#
# } else {
#         tem.novidade <- 1
#         writeLines(arquivos.atual, "../data/lista.txt")
# }
#
# procurando por db pronto, salvo em rds
#tem.rda <- file.exists("../data/dados-ok.rda")
tem.rda <- file.exists(here::here("data", "dados-ok.rda"))
# se tem novidade ou falta o rds, processar do começo:
if(tem.novidade==1|!tem.rda) {
dados <- read_excel(
paste0(here::here("data/"), arquivos.atual[1]),
1, col_types = "text", range = cell_cols("B:F")
)
if (length(arquivos.atual) > 1) {
for (i in 2:length(arquivos.atual)) {
dados <- bind_rows(dados, read_excel(
paste0(here::here("data/"), arquivos.atual[i]),
1, col_types = "text", range = cell_cols("B:F")
)
)
}
}
dados <- tbl_df(dados)
names(dados) %<>% make.names(unique = TRUE, allow_ = TRUE) %>%
tolower() %>% {gsub(" ", ".", .)}
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
real <- dollar_format(prefix = "R$ ")
dados$valor.raw <- dados$valor %>% {gsub(",00|\\.", "", .)} %>%
{gsub(",", ".", .)} %>%
{gsub("R\\$", "", .)} %>% as.numeric(.)
#View(dados[,c("valor", "valorr")])
#View(dados[dados$valorr>2000, ])
dadosT <- dados %>%
rename(tipo = categoria) %>%
mutate(data = parse_date_time(data, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = real(valor.raw),
mes = factor(format(data, "%b"),
levels = c("Jan", "Fev", "Mar",
"Abr", "Mai","Jun",
"Jul", "Ago", "Set",
"Out", "Nov", "Dez"),
ordered=TRUE),
ano = factor(format(data, "%Y")),
mes.ano = format(data, '%Y-%m')
) %>%
select(data, ano, mes, mes.ano, tipo, descrição,
valor.raw,valor)
} else {
load(here::here("data", "dados-ok.rda"))
}
if(!tem.rda) {
# Filtros
## carro novo
## deficit
indices <- grep("defic.", dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
## reserva corolla
indices <- grep("reserva", dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
## complemento pet
indices <- grep("complemento pet", dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
# removendo previsões de gastos
## previsao
indices <- grep("previs.", dadosT$descrição)
# View(dadosT[indices,])
dadosT <- dadosT[-indices,]
# uber é transporte
indices <- grep("uber", dadosT$descrição)
#View(dadosT[indices,])
dadosT$tipo[indices] <- "transporte"
# removendo bomba de combustível
indices <- which(dadosT$tipo == "investimento" &
grepl("^bomba", dadosT$descrição))
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
# revomendo dev. pet
indices <- which(dadosT$descrição == "devolução pet")
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
}
dadosT %<>% group_by(tipo, ano, mes)
if(!tem.rda) {
save(dadosT, file = here::here("data", "dados-ok.rda"))
rm(dados)
}
real <- dollar_format(prefix = "R$ ")
totais <- summarise(dadosT, total.raw=sum(valor.raw)) %>%
mutate(total = real(total.raw))
indices <- grep("novo carro", dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
## abertura pet
indices <- grep("abertura pet", dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
## funilaria
indices <- grep("funilaria", dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
## passagem
indices <- grep("passagem (aérea|mi|doni)", dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
#cooperpecas, cole, ajuste
indices <- grep("cooperpecas|cole|ajuste|baixa", dadosT$descrição)
View(dadosT[indices,])
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
#mudanças
sub <- with(dadosT, tipo=="moradia" & valor.raw > 350)
View(dadosT[sub,])
#View(dadosT[sub,])
dadosFil <- dadosT[!sub,]
# retirando ponto do db
sub <- with(dadosFil, ano==2015 & mes=="Mar" & tipo=="pagamentos" & valor.raw > 4000)
View(dadosT[sub,])
dadosFil <- dadosFil[!sub,] %>% group_by(tipo, ano, mes)
totais <- summarise(dadosFil, total.raw=sum(valor.raw)) %>%
mutate(media.raw = mean(total.raw),
total = real(total.raw),
media = real(media.raw))
View(dadosFil)
remover <- "curso erick|montador|novo carro|abertura pet|funilaria|empréstimo"
indices <- grep(remover, dadosT$descrição)
View(dadosT[indices,])
library(knitr)
library(rmarkdown)
library(magrittr)
library(here)
library(lubridate)
library(readxl)
library(dplyr)
library(ggplot2)
library(RColorBrewer)
library(scales)
library(stringr)
library(grid)
library(gridExtra)
library(plotly)
# gatilho tem.novidade futuramente vai ser ativado a partir de comparação com o servidor
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
#arquivos.atual <- dir("../data/")
arquivos.atual <- dir(here::here("data"))
arquivos.atual <- arquivos.atual[grep("mobils", arquivos.atual)]
# if (file.exists("../data/lista.txt")) {
#         data.previous <- readLines("../data/lista.txt")
#                 if (identical(data.previous,arquivos.atual)) {
#                         tem.novidade <- 0
#                 } else {
#                         tem.novidade <- 1
#                         writeLines(arquivos.atual, "../data/lista.txt")
#                 }
#
# } else {
#         tem.novidade <- 1
#         writeLines(arquivos.atual, "../data/lista.txt")
# }
#
# procurando por db pronto, salvo em rds
#tem.rda <- file.exists("../data/dados-ok.rda")
tem.rda <- file.exists(here::here("data", "dados-ok.rda"))
# se tem novidade ou falta o rds, processar do começo:
if(tem.novidade==1|!tem.rda) {
dados <- read_excel(
paste0(here::here("data/"), arquivos.atual[1]),
1, col_types = "text", range = cell_cols("B:F")
)
if (length(arquivos.atual) > 1) {
for (i in 2:length(arquivos.atual)) {
dados <- bind_rows(dados, read_excel(
paste0(here::here("data/"), arquivos.atual[i]),
1, col_types = "text", range = cell_cols("B:F")
)
)
}
}
dados <- tbl_df(dados)
names(dados) %<>% make.names(unique = TRUE, allow_ = TRUE) %>%
tolower() %>% {gsub(" ", ".", .)}
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
real <- dollar_format(prefix = "R$ ")
dados$valor.raw <- dados$valor %>% {gsub(",00|\\.", "", .)} %>%
{gsub(",", ".", .)} %>%
{gsub("R\\$", "", .)} %>% as.numeric(.)
#View(dados[,c("valor", "valorr")])
#View(dados[dados$valorr>2000, ])
dadosT <- dados %>%
rename(tipo = categoria) %>%
mutate(data = parse_date_time(data, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = real(valor.raw),
mes = factor(format(data, "%b"),
levels = c("Jan", "Fev", "Mar",
"Abr", "Mai","Jun",
"Jul", "Ago", "Set",
"Out", "Nov", "Dez"),
ordered=TRUE),
ano = factor(format(data, "%Y")),
mes.ano = format(data, '%Y-%m')
) %>%
select(data, ano, mes, mes.ano, tipo, descrição,
valor.raw,valor)
} else {
load(here::here("data", "dados-ok.rda"))
}
subs <- "defic.|reserva|complemento pet|previs."
## deficit
indices <- grep(subs, dadosT$descrição)
View(dadosT[indices,])
# uber é transporte
indices <- grep("uber", dadosT$descrição)
#View(dadosT[indices,])
dadosT$tipo[indices] <- "transporte"
# removendo bomba de combustível
indices <- which(dadosT$tipo == "investimento" &
grepl("^bomba", dadosT$descrição))
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
subs <- "defic.|reserva|complemento pet|previs."
## deficit
indices <- grep(subs, dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
subs <- "defic.|reserva|complemento pet|previs."
## deficit
indices <- grep(subs, dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
# uber é transporte
indices <- grep("uber", dadosT$descrição)
#View(dadosT[indices,])
dadosT$tipo[indices] <- "transporte"
# removendo bomba de combustível
indices <- which(dadosT$tipo == "investimento" &
grepl("^bomba", dadosT$descrição))
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
# revomendo dev. pet
indices <- which(dadosT$descrição == "devolução pet")
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
dadosT <- dados %>%
rename(tipo = categoria) %>%
mutate(data = parse_date_time(data, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = real(valor.raw),
mes = factor(format(data, "%b"),
levels = c("Jan", "Fev", "Mar",
"Abr", "Mai","Jun",
"Jul", "Ago", "Set",
"Out", "Nov", "Dez"),
ordered=TRUE),
ano = factor(format(data, "%Y")),
mes.ano = format(data, '%Y-%m')
) %>%
select(data, ano, mes, mes.ano, tipo, descrição,
valor.raw,valor)
subs <- "defic.|reserva|complemento pet|previs."
## deficit
indices <- grep(subs, dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
# uber é transporte
indices <- grep("uber", dadosT$descrição)
#View(dadosT[indices,])
dadosT$tipo[indices] <- "transporte"
# removendo bomba de combustível
indices <- which(dadosT$tipo == "investimento" &
grepl("^bomba", dadosT$descrição))
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
# revomendo dev. pet
indices <- which(dadosT$descrição == "devolução pet")
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
dadosT %<>% group_by(tipo, ano, mes)
if(!tem.rda) {
save(dadosT, file = here::here("data", "dados-ok.rda"))
rm(dados)
}
real <- dollar_format(prefix = "R$ ")
totais <- summarise(dadosT, total.raw=sum(valor.raw)) %>%
mutate(total = real(total.raw))
# o gráfico
# as cores:
# Neste caso, temos 20 cat, mas somente 9 cores na paleta brewer padrao
colourCount = length(unique(totais$tipo))
getPalette = colorRampPalette(brewer.pal(colourCount, "Set1"))
plt.p1 <- ggplot(totais, aes(x=mes, y=total.raw, group=tipo, colour=tipo,
text = paste(ano, "-", mes,
"<br>", tipo,
"<br>", total)))
plt.p1 <- plt.p1 +  geom_line() + geom_point() +
scale_colour_manual(values = getPalette(colourCount))+
facet_grid(ano ~., scale = "free") +
labs(title="Gastos por tipo de despesa - dados não-filtrados",
y="Total (R$)", x="Mês") +
theme(legend.position="bottom") +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(plt.p1, tooltip = "text")
remover <- "curso erick|montador|novo carro|abertura pet|funilaria|empréstimo"
indices <- grep(remover, dadosT$descrição)
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
## passagem
indices <- grep("passagem (aérea|mi|doni)", dadosT$descrição)
View(dadosT[indices,])
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
#cooperpecas, cole, ajuste
indices <- grep("cooperpecas|cole|ajuste|baixa", dadosT$descrição)
View(dadosT[indices,])
#View(dadosT[indices,])
dadosT <- dadosT[-indices,]
#mudanças
sub <- with(dadosT, tipo=="moradia" & valor.raw > 350)
View(dadosT[sub,])
#View(dadosT[sub,])
dadosFil <- dadosT[!sub,]
# pagamentos
sub <- with(dadosFil, ano==2015 & mes=="Mar" & tipo=="pagamentos" & valor.raw > 4000)
# pagamentos
sub <- with(dadosFil, ano==2015 & mes=="Mar" &
tipo=="pagamentos" & valor.raw > 4000)
dadosFil <- dadosFil[!sub,] %>% group_by(tipo, ano, mes)
totais <- summarise(dadosFil, total.raw=sum(valor.raw)) %>%
mutate(media.raw = mean(total.raw),
total = real(total.raw),
media = real(media.raw))
View(dadosFil)
plt.p1 <- ggplot(totais, aes(x=mes, y=total.raw, group=tipo, colour=tipo,
text = paste(ano, "-", mes,
"<br>", tipo,
"<br>", total))) +
geom_line() + geom_point() +
scale_colour_manual(values = getPalette(colourCount))+
facet_grid(ano ~., scale = "free") +
labs(title="Gastos por tipo de despesa - dados filtrados",
y="Total (R$)", x="Mês") +
theme(legend.position="bottom") +
theme(plot.title = element_text(hjust = 0.5))
ggplotly(plt.p1, tooltip = "text")
unlink('~/Documents/dataS-anotacoes/mobils/index_cache', recursive = TRUE)
unlink('~/Documents/dataS-anotacoes/mobils/index_cache', recursive = TRUE)
install.packages("DT")
