sub <- with(dadosM, mes %in% c("Mar","May") & day(dadosM$data) == 25)
dadosub <- dadosM[which(sub),]
kable(dadosub[unique(dadosub$tipo),])
# vamos ver do q se trata, para talvez remover do gráfico
sub <- with(dadosM, mes %in% c("Mar","May") & day(dadosM$data) == 25)
dadosub <- dadosM[which(sub),]
kable(head(dadosub[unique(dadosub$tipo),]))
# vamos ver do q se trata, para talvez remover do gráfico
sub <- with(dadosM, mes %in% c("Jun","Jul") & day(dadosM$data) == 25)
dadosub <- dadosM[which(sub),]
kable(head(dadosub[unique(dadosub$tipo),]))
kable(tail(dadosub[unique(dadosub$tipo),]))
# vamos ver do q se trata, para talvez remover do gráfico
dados.alim <- dadosFil %>% filter(mes %in% c("May","Jul") & tipo=="alimentação") %>%
arrange(ano, mes, desc(valor))
kable(dados.alim)
# vamos ver do q se trata, para talvez remover do gráfico
dados.alim <- dadosFil %>% filter(mes %in% c("May","Jul") & tipo=="alimentação" & valor > 50) %>%
arrange(ano, mes, desc(valor))
kable(dados.alim)
totais.pag <- totais[totais$tipo=="pagamentos",]
plt.pag <- ggplot(totais.pag, aes(x=mes, y=total, group=ano, colour=ano))
(plt.pag +  geom_line() +
geom_point(size=0.5, alpha=0.5) +
# facet_grid(ano ~., scale="free") +
# geom_smooth(colour="black", linetype=3, alpha=0.2) +
# geom_errorbar(aes(ymin=total-erro, ymax=total+erro), width=.1) +
geom_hline(aes(yintercept = media, colour = ano), linetype=2) +
labs(title="Gastos com pagamentos", y="Total (R$)") +
theme(plot.title = element_text(hjust = 0.5))
)
# vamos ver do q se trata, para talvez remover do gráfico
dados.pag <- dadosFil %>% filter(ano %in% c(2015) & tipo=="pagamentos") %>%
arrange(ano, mes, desc(valor))
kable(dados.alim)
# vamos ver do q se trata, para talvez remover do gráfico
dados.pag <- dadosFil %>% filter(ano %in% c(2015) & tipo=="pagamentos") %>%
arrange(ano, mes, desc(valor))
kable(dados.pag)
# vamos ver do q se trata, para talvez remover do gráfico
dados.pag <- dadosFil %>% filter(ano %in% c(2015) & tipo=="pagamentos" & valor > 200) %>%
arrange(ano, mes, desc(valor))
kable(dados.pag)
dados.cor <- dadosFil %>% filter(ano %in% c(2015) & tipo=="corolla") %>%
arrange(ano, mes, desc(valor))
kable(dados.cor)
month(dadosFil$data[1])
dados.cor <- dadosFil %>% filter(ano %in% c(2015) & tipo=="corolla" & month(data) > 8) %>%
arrange(ano, mes, desc(valor))
kable(dados.cor)
dados.cor <- dadosFil %>% filter(ano %in% c(2015) & tipo=="corolla" & month(data) >= 8) %>%
arrange(ano, mes, desc(valor))
kable(dados.cor)
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
# vamos ver do q se trata, para talvez remover do gráfico
sub <- with(dadosM, ano==2015 & mes=="Mar" & tipo=="pagamentos" )
kable(dadosM[which(sub),1:6])
# vamos ver do q se trata, para talvez remover do gráfico
sub <- with(dadosM, mes %in% c("Jun","Jul") & day(dadosM$data) == 25)
dadosub <- dadosM[which(sub),]
kable(head(dadosub[unique(dadosub$tipo),1:6]))
kable(tail(dadosub[unique(dadosub$tipo),1:6]))
dados.alim <- dadosFil %>% filter(mes %in% c("May","Jul") & tipo=="alimentação" & valor > 50) %>%
arrange(ano, mes, desc(valor))
kable(dados.alim[,1:6])
dados.pag <- dadosFil %>% filter(ano %in% c(2015) & tipo=="pagamentos" & valor > 200) %>%
arrange(ano, mes, desc(valor))
kable(dados.pag[,1:6])
dados.cor <- dadosFil %>% filter(ano %in% c(2015) & tipo=="corolla" & month(data) >= 8) %>%
arrange(ano, mes, desc(valor))
kable(dados.cor[,1:6])
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
library(data.table)
library(dplyr)
library(lubridate)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
library(knitr)
#versão csv
arquivo <- "data/mobills-2015a2017-03.csv"
dados <- read.csv(arquivo)
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
library(markdown)
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
library(data.table)
library(dplyr)
library(lubridate)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
library(knitr)
library(rmarkdown)
#versão csv
arquivo <- "data/mobills-2015a2017-03.csv"
dados <- read.csv(arquivo)
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
installed.packages("httpuv")
install.packages("httpuv")
install.packages("catools")
install.packages("caTools")
library(rmarkdown)
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
library(data.table)
library(dplyr)
library(lubridate)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
library(knitr)
library(rmarkdown)
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
library(rmarkdown)
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
render("analise.Rmd", output_format = "md_document", output_file="readme.md")
unlink('~/Documents/dataS-anotacoes/mobils/analise_cache', recursive = TRUE)
unlink('~/Documents/dataS-anotacoes/mobils/analise_cache', recursive = TRUE)
knit_with_parameters('~/Documents/dataS-anotacoes/mobils/analise.Rmd')
unlink('~/Documents/dataS-anotacoes/mobils/readme_cache', recursive = TRUE)
library(data.table)
library(dplyr)
library(lubridate)
library(ggplot2)
library(RColorBrewer)
library(gridExtra)
library(rmarkdown)
#versão csv
arquivo <- "data/mobills-2015a2017-03.csv"
dados <- read.csv(arquivo)
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(as.character(gsub(",","", valor))),
mes = month(data, label=TRUE),
ano = factor(ano)
) %>%
filter(data >= as.Date("2015-01-01") & data < as.Date("2017-01-01")) %>%
select(data, ano, mes, tipo, descrição, valor, cartao)
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(as.character(gsub(",","", valor))),
mes = month(data, label=TRUE, locale="pt"),
ano = factor(ano)
) %>%
filter(data >= as.Date("2015-01-01") & data < as.Date("2017-01-01")) %>%
select(data, ano, mes, tipo, descrição, valor, cartao)
wday(2)
wday(2, label = T)
wday(2, label = T, locale="en")
?wday
library(readr)
locale("pt")
locale("pt_BR")
locale("pt_br")
Sys.setlocale('LC_TIME','C')
wday(2, label = T)
Sys.setlocale('LC_TIME','pt')
Sys.setlocale('LC_TIME','C')
Sys.setlocale('LC_TIME','C')
wday(2, label = T)
Sys.setlocale('LC_TIME','C')
wday(2, label = T)
wday(5, label = T)
wday(5, label = T, locale=locale("pt"))
locale("pt")
locale("pt_br")
locale("pt_BR")
locale("br")
locale("Br")
locale("BR")
?locale
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
locale(pt)
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
locale("pt"")
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date_time(date, "dmY", locale=locale("pt")),
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
locale("pt")
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date_time(date, "dmY", locale=locale("pt")),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(as.character(gsub(",","", valor))),
mes = month(data, label=TRUE, locale="pt"),
ano = factor(ano)
) %>%
filter(data >= as.Date("2015-01-01") & data < as.Date("2017-01-01")) %>%
select(data, ano, mes, tipo, descrição, valor, cartao)
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
locale("pt")
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date(date, "dmY", locale=locale("pt")),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(as.character(gsub(",","", valor))),
mes = month(data, label=TRUE, locale="pt"),
ano = factor(ano)
) %>%
filter(data >= as.Date("2015-01-01") & data < as.Date("2017-01-01")) %>%
select(data, ano, mes, tipo, descrição, valor, cartao)
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
locale("pt")
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date(date, "dMY", locale=locale("pt")),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(as.character(gsub(",","", valor))),
mes = month(data, label=TRUE, locale="pt"),
ano = factor(ano)
) %>%
filter(data >= as.Date("2015-01-01") & data < as.Date("2017-01-01")) %>%
select(data, ano, mes, tipo, descrição, valor, cartao)
?parse_date()
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
locale("pt")
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date(date, format = "%d%M%Y", locale=locale("pt")),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(as.character(gsub(",","", valor))),
mes = month(data, label=TRUE, locale="pt"),
ano = factor(ano)
) %>%
filter(data >= as.Date("2015-01-01") & data < as.Date("2017-01-01")) %>%
select(data, ano, mes, tipo, descrição, valor, cartao)
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
locale("pt")
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date(date, format = "%d%M%Y", locale=locale("pt")),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(as.character(gsub(",","", valor))),
mes = month(data, label=TRUE),
ano = factor(ano)
) %>%
filter(data >= as.Date("2015-01-01") & data < as.Date("2017-01-01")) %>%
select(data, ano, mes, tipo, descrição, valor, cartao)
dadosT$mes
dadosT$data
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
locale("pt")
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date(date, format = "%d%m%Y", locale=locale("pt")),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(as.character(gsub(",","", valor))),
mes = month(data, label=TRUE),
ano = factor(ano)
) %>%
filter(data >= as.Date("2015-01-01") & data < as.Date("2017-01-01")) %>%
select(data, ano, mes, tipo, descrição, valor, cartao)
dadosT$date
dados$Date
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
locale("pt")
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date(date, format = "%d %B %Y", locale=locale("pt")),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(as.character(gsub(",","", valor))),
mes = month(data, label=TRUE),
ano = factor(ano)
) %>%
filter(data >= as.Date("2015-01-01") & data < as.Date("2017-01-01")) %>%
select(data, ano, mes, tipo, descrição, valor, cartao)
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
locale("pt")
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date(date, format = "%d%B%Y", locale=locale("pt")),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(as.character(gsub(",","", valor))),
mes = month(data, label=TRUE),
ano = factor(ano)
) %>%
filter(data >= as.Date("2015-01-01") & data < as.Date("2017-01-01")) %>%
select(data, ano, mes, tipo, descrição, valor, cartao)
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
locale("pt")
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(as.character(gsub(",","", valor))),
mes = month(data, label=TRUE),
ano = factor(ano)
) %>%
filter(data >= as.Date("2015-01-01") & data < as.Date("2017-01-01")) %>%
select(data, ano, mes, tipo, descrição, valor, cartao)
dadosT$mes
local -a
locale -a
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
Sys.setlocale('LC_TIME','C')
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(as.character(gsub(",","", valor))),
mes = month(data, label=TRUE, locale="pt_BR.utf8"),
ano = factor(ano)
) %>%
filter(data >= as.Date("2015-01-01") & data < as.Date("2017-01-01")) %>%
select(data, ano, mes, tipo, descrição, valor, cartao)
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
Sys.setlocale('LC_TIME','C')
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
data = dmy(data, locale="pt_BR.utf8")
descrição = tolower(as.character(descrição)),
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
Sys.setlocale('LC_TIME','C')
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
data = dmy(data, locale="pt_BR.utf8"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(as.character(gsub(",","", valor))),
mes = month(data, label=TRUE),
ano = factor(ano)
) %>%
filter(data >= as.Date("2015-01-01") & data < as.Date("2017-01-01")) %>%
select(data, ano, mes, tipo, descrição, valor, cartao)
data <- parse_date_time(dados$Date, "dmY")
data
dmy(data)
?dmy(data)
data <- dmy(dados$Date)
data
class(data)
class(data[1])
data[1]
data[1] +1
data <- dmy(dados$Date, locale=Sys.getlocale("LC_TIME"))
data[1]
month(data[1])
month(data[1], label = T)
data <- dmy(dados$Date, locale=Sys.getlocale("pt_BR.utf8"))
data <- dmy(dados$Date, locale="pt_BR.utf8")
month(data[1], label = T)
data <- dmy(dados$Date, locale="pt")
data <- dmy(dados$Date, locale="pt_BR")
data <- dmy(dados$Date, locale="English")
data <- dmy(dados$Date, locale= Sys.getlocale("LC_TIME", "C"))
data <- dmy(dados$Date, locale= Sys.getlocale("LC_TIME"))
month(data[1], label = T)
data <- dmy(dados$Date, locale= Sys.getlocale("C"))
Sys.getlocale("LC_TIME"))
Sys.getlocale("LC_TIME")
Sys.setlocale('LC_TIME','pt_BR.utf8')
Sys.getlocale("LC_TIME"))
Sys.getlocale("LC_TIME")
data <- dmy(dados$Date, locale= Sys.getlocale("LC_TIME"))
month(data[1], label = T)
# tratando o banco de dados
dadosT <- tbl_df(dados)
names(dadosT) <- tolower(names(dadosT)) # para facilitar o uso das vars
# # filtrando as informações que interessam, ou seja, somente da conta itau # e
# datas acima de 01-01-15, vamos considerar que eu não usava bem o app antes
# disso e abaixo de 01-01-2017, porque quando este banco de dados foi gerado
# ainda não havia muita # informação sobre 2017
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
dadosT <- dadosT %>% rename(tipo = category, valor = amount, descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(as.character(gsub(",","", valor))),
mes = month(data, label=TRUE),
ano = factor(ano)
) %>%
filter(data >= as.Date("2015-01-01") & data < as.Date("2017-01-01")) %>%
select(data, ano, mes, tipo, descrição, valor, cartao)
