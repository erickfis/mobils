teste <- as.character(system("lsb_release -a"))
tete
teste
teste <- system("lsb_release -a", intern = TRUE)
teste
system("lsb_release -a", intern = TRUE)[2]
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.local[grep("mobills", arquivos.local)]
# gatilho tem.novidade futuramente vai ser ativado a partir de comparação com o servidor
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.ftp, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
# procurando por db pronto, salvo em rds
tem.rds <- file.exists("../data/dados-ok.rds")
# se tem novidade ou falta o rds, processar do começo:
if(tem.novidade==1|!tem.rds) {
# dados <- read.csv(paste0("data/", arquivos.local[1]))
dados <- fread(paste0("../data/", arquivos.atual[1]), na.strings = "")
for (i in 2:length(arquivos.atual)) {
dados <- bind_rows(dados, fread(
paste0("../data/", arquivos.atual[i]),
na.strings = "")
)
}
dados <- tbl_df(dados)
names(dados) <- tolower(names(dados)) # para facilitar o uso das vars
# # filtrando as informações que interessam,
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
dadosT <- dados %>% rename(tipo = category, valor = amount,
descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(gsub("\\$|,","", valor)),
mes = factor(months(data, abbreviate=TRUE),
levels = c("Jan", "Fev", "Mar", "Abr", "Mai",
"Jun", "Jul", "Ago", "Set", "Out",
"Nov", "Dez"), ordered=TRUE),
ano = factor(year(data))
) %>%
select(data, ano, mes, tipo, descrição, valor)
# Vamos agrupar os dados por tipo de gasto, ano e mes, e depois calcular o total de gastos em cada categoria
dadosT <- dadosT %>% group_by(tipo, ano, mes)
saveRDS(dadosT, "../data/dados-ok.rds")
rm(dados)
} else{
dadosT <- readRDS("../data/dados-ok.rds")
}
totais <- summarise(dadosT, total=sum(valor))
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.ftp, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.ftp, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.ftp, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.ftp, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
tem.novidade <- 0
# verifica se os arquivos disponíveis são os mesmos que já foram utilizados anteriormente. Se não, dispara um novo processamento
arquivos.atual <- dir("../data/")
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
library(scales)
library(stringr)
library(data.table)
library(readxl)
# library(chron)
library(dplyr)
library(lubridate)
library(ggplot2)
library(rmarkdown)
library(RColorBrewer)
library(gridExtra)
library(grid)
tem.novidade <- 0
arquivos.atual <- dir("../data/")
arquivos.atual
arquivos.atual <- arquivos.atual[grep("mobills", arquivos.atual)]
arquivos.atual
if (file.exists("../data/lista.txt")) {
data.previous <- readLines("../data/lista.txt")
if (identical(data.previous,arquivos.atual)) {
tem.novidade <- 0
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
} else {
tem.novidade <- 1
writeLines(arquivos.atual, "../data/lista.txt")
}
tem.rda <- file.exists("../data/dados-ok.rda")
arquivos.atual
dados <- read_excel(paste0("../data/", arquivos.atual[i]), 1,
col_types = c(rep("text",6)))
dados <- read_excel(paste0("../data/", arquivos.atual[1]), 1,
col_types = c(rep("text",6)))
arquivos.atual
length(arquivos.atual)
if(tem.novidade==1|!tem.rda) {
dados <- read_excel(paste0("../data/", arquivos.atual[1]), 1,
col_types = c(rep("text",6)))
if (length(arquivos.atual) > 1) {
for (i in 2:length(arquivos.atual)) {
dados <- bind_rows(dados, read_excel(
paste0("../data/", arquivos.atual[i]), 1,
col_types = c(rep("text",6)))
)
}
}
dados <- tbl_df(dados)
names(dados) <- tolower(names(dados)) # para facilitar o uso das vars
# # filtrando as informações que interessam,
# Além disso, transformar tudo para lowercase, converter formato de datas,
# renomear variáveis, selecionar as que interessam, criar variável mês
dadosT <- dados %>% rename(tipo = category, valor = amount,
descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(gsub("\\$|,","", valor)),
mes = factor(months(data, abbreviate=TRUE),
levels = c("Jan", "Fev", "Mar", "Abr", "Mai",
"Jun", "Jul", "Ago", "Set", "Out",
"Nov", "Dez"), ordered=TRUE),
ano = factor(year(data))
) %>%
select(data, ano, mes, tipo, descrição, valor)
# Vamos agrupar os dados por tipo de gasto, ano e mes, e depois calcular o total de gastos em cada categoria
dadosT <- dadosT %>% group_by(tipo, ano, mes)
saveRDS(dadosT, "../data/dados-ok.rda")
rm(dados)
} else{
dadosT <- readRDS("../data/dados-ok.rda")
}
dados <- read_excel(paste0("../data/", arquivos.atual[1]), 1,
col_types = c(rep("text",6)))
if (length(arquivos.atual) > 1) {
for (i in 2:length(arquivos.atual)) {
dados <- bind_rows(dados, read_excel(
paste0("../data/", arquivos.atual[i]), 1,
col_types = c(rep("text",6)))
)
}
}
dados <- tbl_df(dados)
names(dados) <- tolower(names(dados)) # para facilitar o uso das vars
View(dados)
dadosT <- dados %>% filter(account == itau)
dadosT <- dados %>% filter(account == "itau")
View(dadosT)
dados <- tbl_df(dados)
valid_column_names <- make.names(names=names(dados),
unique=TRUE, allow_ = TRUE)
valid_column_names
names(dados) <- valid_column_names
names(dados) <- gsub(" ", ".", tolower(names(dados.banho)))
names(dados) <- gsub(" ", ".", tolower(names(dados)))
dadosT <- dados %>% filter(account == "itau") %>%
rename(categoria = expense.type, valor = amount,
descrição = description)
dadosT <- dados %>% filter(account == "itau") %>%
rename(categoria = expense.type, valor = amount,
descrição = description) %>%
mutate(data = parse_date_time(date, "dmY")
dadosT <- dados %>% filter(account == "itau") %>%
dadosT <- dados %>% filter(account == "itau") %>%
rename(tipo = expense.type, valor = amount,
descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(gsub("\\$|,","", valor)),
mes = factor(months(data, abbreviate=TRUE),
levels = c("Jan", "Fev", "Mar", "Abr",
"Mai","Jun", "Jul", "Ago",
"Set", "Out","Nov", "Dez"),
ordered=TRUE),
ano = factor(year(data)),
mes.ano = format(data, '%Y-%m')
) %>%
select(data, ano, mes, mes.ano, tipo, descrição, valor)
View(dadosT)
View(dados)
dadosT <- dadosT %>% group_by(tipo, mes.ano)
save(dadosT, "../data/dados-ok.rda")
?save()
save(dadosT, file = "../data/dados-ok.rda")
saveRDS(dadosT, "../data/dados-ok.rds")
rm(dados)
totais <- summarise(dadosT, total=sum(valor))
View(totais)
# o gráfico
# as cores:
# Neste caso, temos 20 cat, mas somente 9 cores na paleta brewer padrao
colourCount = length(unique(totais$tipo))
getPalette = colorRampPalette(brewer.pal(9, "Set1"))
plt.p1 <- ggplot(totais, aes(x=mes, y=total, group=tipo, colour=tipo))
plt.p1 <- plt.p1 +  geom_line() + geom_point() +
scale_colour_manual(values = getPalette(colourCount))+
facet_grid(ano ~., scale = "free") +
labs(title="Gastos por tipo de despesa - dados não-filtrados", y="Total (R$)", x="Mês") +
theme(legend.position="none") +
theme(plot.title = element_text(hjust = 0.5))
plt.p1
plt.p1 <- ggplot(totais, aes(x=mes.ano, y=total, group=tipo, colour=tipo))
plt.p1 <- plt.p1 +  geom_line() + geom_point() +
scale_colour_manual(values = getPalette(colourCount))+
facet_grid(ano ~., scale = "free") +
labs(title="Gastos por tipo de despesa - dados não-filtrados", y="Total (R$)", x="Mês") +
theme(legend.position="none") +
theme(plot.title = element_text(hjust = 0.5))
plt.p1
totais <- summarise(dadosT, ano = ano, total=sum(valor))
totais <- summarise(dadosT, total=sum(valor))
plt.p1 <- ggplot(totais, aes(x=mes.ano, y=total, group=tipo, colour=tipo))
plt.p1 <- plt.p1 +  geom_line() + geom_point() +
scale_colour_manual(values = getPalette(colourCount))+
facet_grid(format(mes.ano, '%Y') ~., scale = "free") +
labs(title="Gastos por tipo de despesa - dados não-filtrados", y="Total (R$)", x="Mês") +
theme(legend.position="none") +
theme(plot.title = element_text(hjust = 0.5))
plt.p1
totais$mes.ano
totais$mes.ano[1]
format(totais$mes.ano[1], "%y")
year(totais$mes.ano[1])
dadosT <- dadosT %>% group_by(tipo, ano, mes.ano)
dadosT <- dadosT %>% group_by(tipo, ano, mes.ano)
dadosT <- dados %>% filter(account == "itau") %>%
rename(tipo = expense.type, valor = amount,
descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(gsub("\\$|,","", valor)),
mes = factor(months(data, abbreviate=TRUE),
levels = c("Jan", "Fev", "Mar", "Abr",
"Mai","Jun", "Jul", "Ago",
"Set", "Out","Nov", "Dez"),
ordered=TRUE),
ano = factor(year(data)),
mes.ano = format(data, '%Y-%m')
) %>%
select(data, ano, mes, mes.ano, tipo, descrição, valor)
dados <- read_excel(paste0("../data/", arquivos.atual[1]), 1,
col_types = c(rep("text",6)))
dados <- tbl_df(dados)
valid_column_names <- make.names(names=names(dados),
unique=TRUE, allow_ = TRUE)
names(dados) <- valid_column_names
names(dados) <- gsub(" ", ".", tolower(names(dados)))
dadosT <- dados %>% filter(account == "itau") %>%
rename(tipo = expense.type, valor = amount,
descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(gsub("\\$|,","", valor)),
mes = factor(months(data, abbreviate=TRUE),
levels = c("Jan", "Fev", "Mar", "Abr",
"Mai","Jun", "Jul", "Ago",
"Set", "Out","Nov", "Dez"),
ordered=TRUE),
ano = factor(year(data)),
mes.ano = format(data, '%Y-%m')
) %>%
select(data, ano, mes, mes.ano, tipo, descrição, valor)
dadosT <- dadosT %>% group_by(tipo, ano, mes.ano)
totais <- summarise(dadosT, total=sum(valor))
View(totais)
plt.p1 <- ggplot(totais, aes(x=mes.ano, y=total, group=tipo, colour=tipo))
plt.p1 <- plt.p1 +  geom_line() + geom_point() +
scale_colour_manual(values = getPalette(colourCount))+
facet_grid(ano ~., scale = "free") +
labs(title="Gastos por tipo de despesa - dados não-filtrados", y="Total (R$)", x="Mês") +
theme(legend.position="none") +
theme(plot.title = element_text(hjust = 0.5))
plt.p1
dadosT <- dados %>% filter(account == "itau") %>%
rename(tipo = expense.type, valor = amount,
descrição = description) %>%
mutate(data = parse_date_time(date, "dmY"),
descrição = tolower(as.character(descrição)),
tipo = factor(tolower(as.character(tipo))),
valor = as.numeric(gsub("\\$|,","", valor)),
mes = factor(months(data, abbreviate=TRUE),
levels = c("Jan", "Fev", "Mar", "Abr",
"Mai","Jun", "Jul", "Ago",
"Set", "Out","Nov", "Dez"),
ordered=TRUE),
ano = factor(year(data)),
mes.ano = format(data, '%Y-%m')
) %>%
select(data, ano, mes, mes.ano, tipo, descrição, valor)
dadosT <- dadosT %>% group_by(tipo, ano, mes)
totais <- summarise(dadosT, total=sum(valor))
save(dadosT, file = "../data/dados-ok.rda")
plt.p1 <- ggplot(totais, aes(x=mes, y=total, group=tipo, colour=tipo))
plt.p1 <- plt.p1 +  geom_line() + geom_point() +
scale_colour_manual(values = getPalette(colourCount))+
facet_grid(ano ~., scale = "free") +
labs(title="Gastos por tipo de despesa - dados não-filtrados", y="Total (R$)", x="Mês") +
theme(legend.position="none") +
theme(plot.title = element_text(hjust = 0.5))
plt.p1
plt.p1
plt.p1 <- ggplot(totais, aes(x=mes, y=total, group=tipo, colour=tipo))
plt.p1 <- plt.p1 +  geom_line() + geom_point() +
scale_colour_manual(values = getPalette(colourCount))+
facet_grid(ano ~., scale = "free") +
labs(title="Gastos por tipo de despesa - dados não-filtrados", y="Total (R$)", x="Mês") +
theme(legend.position="bottom") +
theme(plot.title = element_text(hjust = 0.5))
plt.p1
plt.p1
sub <- with(dadosT, ano==2015 & mes=="Mar" & tipo=="pagamentos" )
kable(dadosT[which(sub),1:6], caption = "categoria pagamentos, em março de 2015")
library(knitr)
opts_chunk$set(echo = FALSE, message = FALSE, include = TRUE,
warning = FALSE, autodep = TRUE, options(scipen=999))
h
kable(dadosT[which(sub),1:6], caption = "categoria pagamentos, em março de 2015")
View(dadosT)
kable(dadosT[which(sub),1,5:7], caption = "categoria pagamentos, em março de 2015")
kable(dadosT[which(sub),c(1,5:7)], caption = "categoria pagamentos, em março de 2015")
kable(dadosT[sub,c(1,5:7)], caption = "categoria pagamentos, em março de 2015")
plt.p1
sub <- with(dadosT, ano==2015 & mes=="Mar" & tipo=="pagamentos" & valor > 4000)
dadosFil <- dadosT[which(!sub),]
dadosFil <- group_by(dadosFil, tipo, ano, mes)
totais <- summarise(dadosFil, total=sum(valor)) %>%
mutate(media = mean(total))
rm(dadosT) # house cleanning
plt.p2 <- ggplot(totais, aes(x=mes, y=total, group=tipo, colour=tipo))
plt.p2 <- plt.p2 +  geom_line() + geom_point() +
scale_colour_manual(values = getPalette(colourCount))+
facet_grid(ano ~., scale="free") +
labs(title="Gastos por tipo de despesa - dados filtrados",
y="Total (R$)", x="Mês") +
theme(legend.title=element_blank()) +
theme(legend.position="bottom") +
guides(fill=guide_legend(nrow=5, byrow=TRUE)) +
theme(plot.title = element_text(hjust = 0.5))
plt.p2
dadosT <- load("../data/dados-ok.rda")
unlink('~/Documents/dataS-anotacoes/mobils/index_cache', recursive = TRUE)
View(totais)
totais.cor <- totais[totais$tipo=="corolla",]
plt.cor <- ggplot(totais.cor, aes(x=mes, y=total, group=ano, colour=ano))
(plt.cor +  geom_line() +
geom_point(size=0.5, alpha=0.5) +
geom_hline(aes(yintercept = media, colour = ano), linetype=2) +
labs(title="Gastos com Corolla", y="Total (R$)", x="Mês") +
theme(plot.title = element_text(hjust = 0.5))
)
View(totais.cor)
dados.cor <- dadosFil %>% filter(ano %in% c(2017) & tipo=="corolla") %>%
arrange(ano, mes, desc(valor))
kable(dados.cor[,1:6])
View(dadosFil)
kable(dados.cor[,1,6,7])
kable(dados.cor[,c(1,6,7)])
dados.cor <- dadosFil %>% filter(ano %in% c(2017) & tipo=="corolla" &
month(data) == 6) %>%
arrange(ano, mes, desc(valor))
kable(dados.cor[,c(1,6,7)])
